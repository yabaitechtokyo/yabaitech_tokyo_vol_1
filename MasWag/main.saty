% -*- coding: utf-8 -*-
@require: stdja
@require: proof
@import: bib
@import: local
% @import: tabular

document (|
  title-ja = {RNNからのオートマトン学習};
  title-en = {};
  author-en = {MasWag};
  author-ja = {MasWag};
%  show-title = true;
%  show-toc = true;
  date = {};
  supervisor-en = {};
  supervisor-ja = {};
  supervisor-title = {};
  bibliography = bibliography;
  abstract-en = '<
    +p {
      abstract abstract
    }
  >;
  abstract-ja = '<
    +p {
      abst abst abst
    }
  >;
  acknowledgements = '<
    +p {
      ack ack ack
    }                                
  >;
|) '<
  +section {はじめに}<
    +p {
    本文書では、ICML 2018に採択された Extracting Automata from Recurrent Neural Networks Using Queries and Counterexamples \cite([`conf/icml/WeissGY18`]); について、オートマトン理論的な背景に重点を置いて解説します。本文書中で、形式言語理論についての知識は仮定しませんが、素朴集合論の知識や記号などは適宜使用します。また、RNNについての基本的な知識を仮定します。この論文では、文字列の二値分類問題について学習済みのLong Short-Term Memory (LSTM)やGated Recurrent Unit (GRU)などのRecurrent Neural Network (RNN)からDetermistic Finite Automaton(決定的有限オートマトン、DFA)を抽出する手法を提案しています。本手法は神託を用いて正規言語を学習するAngluinによるL\*アルゴリズムを、RNNを用いて学習する手法に応用したものになります。L\*アルゴリズムではある文字列 ${w \in \alphabet^\ast} が学習したい言語 ${L\subseteq \alphabet^\ast} に含まれているか (${w \in L})を質問する \dfn{所属性質問} (membership query)と、学習した言語${L'\subseteq \alphabet^\ast}が学習したい言語${L\subseteq \alphabet^\ast}と等しいかどうかを質問する \dfn{等価性質問} (equivalence query)の二種類の質問を繰り返すことで効率良く、学習したい言語を最小の状態数を持つオートマトンで学習します。RNNを用いて学習する場合には、所属性質問に答えることは可能ですが (RNNに文字列を与えれば良い) 、等価性質問に答えることは一般には不可能です。この論文の主な貢献は、RNNを用いて(近似的に)等価性質問に答える手法を与えた、ということになります。
    }
    +p {
    本文書の構成は以下のようになります。まず第二節で形式言語やオートマトンの必要な定義を与えます。第三節ではAngluinのL\*アルゴリズムやそれに関連してMyhill-Nerodeの定理など正規言語の学習についての紹介を行います。第四節では本題の、RNNを用いてL\*アルゴリズムの等価性質問に答える手法を説明します。
    }
  >
  +section {形式言語とオートマトン}<
  +p{
      本文書中では有限集合 ${\Sigma}を\dfn{文字} の集合として用います。例えば電話番号の様な数字の列を考える場合、${\Sigma}としてアラビア数字の集合${\{0,1,2,3,4,5,6,7,8,9\}}を用います。文字の有限列を\dfn{文字列}と定義します。文字列を結合するときには基本的に単に並べて書きますが、結合していることを強調する場合に演算子${\cdot}を用いる場合もあります。例えば${\Sigma=\{0,1,2,3,4,5,6,7,8,9\}}のとき、${110}や${0120444444}などは文字列となります。これらを結合した ${110\cdot 0120444444=1100120444444}も文字列です。また、長さ0の特別な文字列として${\epsilon}を用います。任意の文字列${w}について${\epsilon}は${w\cdot\epsilon=\epsilon\cdot w=w}の性質が成り立ちます。
    }
  +p{
    文字列の集合を\dfn{言語}と言います。例えば${\Sigma=\{0,1,2,3,4,5,6,7,8,9\}}のときに${\Sigma^\ast}の部分集合である、3桁の電話番号の集合やフリーダイアルの電話番号の集合などは言語の例です。偶数の集合や回文となっている文字列の集合も言語の例です。
    }
    +p{
    \dfn{決定的有限オートマトン} (Deterministic Finite Automata, DFA)は、様々な言語の中でも\dfn{正規言語}と呼ばれる言語を表現する方法の中の一つです。DFAは図にあるような状態遷移図を用いて表されます。TODO
    }
    +p{
    形式的な定義は以下の様になります。
    }
  +definition ?:({DFA}) ?:(`def:DFA`) {
        ほげほげ
  }

  +subsection {余談}<
    +p{上で正規言語を定義しましたが、言語全体で見ると勿論正規言語以外の言語も多数あります。というより、正規言語はDFAという\emph{有限状態}の遷移図で書き表せるという点でかなり制限が強い言語であり、一方で様々な良い性質を持った言語です。例えば次節で紹介するL\*アルゴリズムの停止性は、正規言語の"有限状態らしさ"による特徴付けである、Myhill-Nerodeの定理と深い関係があります。 
    }
    > 
  >
>