% -*- coding: utf-8 -*-
@import: settings

let future-work = '<
  +p{
    \SATySFi;は現時点でも充分実用に耐える程度に機能を備えているが，
    今後さらに拡張していきたいと考えている点がいくつもある．
    本章ではこれについて簡潔に述べることとしよう．
    端的に言ってしまえば開発に協力してくださるかもしれない方への喧伝である．
  }
  +section{機能の拡張}<
    +subsection?:(`text-mode`){テキストモード}<
      +p{
        \dfnje{テキストモード}{text mode}は，
        \SATySFi;で書かれた文書をHTMLや\LaTeX;といったテキストファイルへとトランスパイルするためのモードである．
        \SATySFi;の前身である，拙作の\dfn{Macrodown}という言語が担っていた処理の，形式化を改めた再来ともいえる．
        テキストモードでは，
        PDFを出力する通常のモードである\dfnje{PDFモード}{PDF mode}には備わっていた
        \type(Type.inline-boxes);などの型や
        \codem{read-inline}などのプリミティヴはなく，
        インラインテキストは\codem{read-inline}の代わりに用意されたプリミティヴ
        \codem{stringify-inline}により文字列化される．
        一応すでに\code(`--text-mode`);というオプションで起動して試用できるが，
        数式には対応していない．
        将来的には数式もMathMLへトランスパイルしたり
        実際に（PDFモードと同様に）組版処理を施してSVGとして出力したりする機能を
        備えつけることを想定している．
      }
    >
    +subsection{文字組版機能の拡張}<
      +desc{縦書き，LTR/RTL混植}{
        縦書きは少なくとも和文組版では根強い需要があるし，
        ラテン文字とアラビア文字などLTRな文字体系とRTLな文字体系の混植も多言語組版では避けることのできない道だ．
        特に縦書きはプリミティヴの設計など言語のインターフェイスを大幅に拡張する必要が見込まれる．
      }
      +desc{2段組み}{
        論文組版で特に需要がある．
        インターフェイスの設計や，
        脚註や浮動する図表などと共存させた処理の実装がやや難しい．
      }
      +desc{OpenTypeフィーチャのON/OFF機能}{
        OpenTypeフォントの\code(`GSUB`);や\code(`GPOS`);といったテーブルには
        発展的な文字組版を実現するための種々のデータが格納されており，
        現在の\SATySFi;はOpenTypeフィーチャのうち
        合字処理のために\code(`liga`);テーブルを，
        カーニング処理のために\code(`kern`);テーブルを，
        ダイアクリティカルマークの処理のために\code(`mark`);テーブルと\code(`mkmk`);テーブルを，
        このほか数式フォントのために\code(`ssty`);テーブルなどを読み出すのだが，
        パッケージレヴェルでこれらのフィーチャの有効・無効を切り替えるプリミティヴを提供していないので，
        例えば\code(`jp90`); (JIS90 Forms) などのフィーチャを有効にして
        漢字字形を切り替えるなどの高度な調整はまだできない．
        将来的にこれを可能にしたいと考えている．
      }
      +desc{合字やカーニング処理の言語ごとの切り替え}{
        合字処理やカーニング処理は現在ラテン文字のみに対応しているが，
        これを他の文字体系に拡張し，かつ言語ごとに切り替えられるようにしたい．
        実装自体は単純だが，インターフェイスをどう簡潔にするかが多少非自明である．
      }
      +desc{ウィドウ，オーファン対応}{
        段落の最後の行だけ分割されて次のページの先頭に組まれて見栄えが悪いものを\dfnje{ウィドウ}{widow}，
        段落の最後の行が行長に対してかなり短くなって見栄えが悪いことを\dfnje{オーファン}{orphan}とそれぞれ呼ぶ．
        これらを防ぐ（何らかのペナルティを与えて出現を抑制する）機構が現在の\SATySFi;には備わっていない．
      }
      +desc{数式のalignment tab}{
        \LaTeX;の\code(`align`);環境などでは数式の揃え位置を決定するのに
        alignment tabという概念が備わっており，
        デフォルトでは\code(`&`);という文字がこれの記述を担う．
        \SATySFi;にはこれが備わっていないため，
        \codem{+align}コマンドなどでは揃える場所で切った数式のリストを渡すという
        ぎこちない仕組みを採ってしまっている．
        \SATySFi;にもalignment tabに相当する機能を追加し，
        これをより自然なインターフェイスにしたい．
      }
      +desc{ページ分割できる表組版}{
        現在の\SATySFi;はインラインボックス列としての表しか組めないが，
        ブロックボックス列版でかつ途中でページ分割できる表を組む機能を追加したいと考えている．
      }
      +desc{行長が変わる段落}{
        途中で行長が変わるような段落の組版は，
        途中で図版を回り込むようにテキストを組んだりするのに便利なのだが，
        計算量上効率的な実現がかなり難しい．
        \TeX;では\code(`\parshape`);というコマンドにより実現されているが，
        これは「何行目をどれだけの長さにする」という指定方法を採っており，
        行分割後の各行に含まれる内容の高さと深さによっては
        段落全体が所望の形にはならず縦に伸びたりしてしまう．
        何らかの方法で段落を
        （矩形とは限らない，途中で幅が変わるような）図形に収めるように行分割する処理を
        アルゴリズムとして確立したい．
      }
    >
    +subsection{言語機能やシステム上の拡張}<
      +desc{シグネチャ，多重モジュール}{
        シグネチャに別名をつけたり，モジュールを多重化できるように
        モジュールシステムを拡張したい．
      }
      +desc{型クラスまたはファンクタ}{
        現状の\SATySFi;はいわゆるオーヴァーロードができないため，
        記述が複雑になってしまうことがよくある．
        アドホック多相を型安全に実現するため，
        Haskell等で根強い支持を確立している
        \dfnje{型クラス}{typeclass}を導入したいと考えている．
        或いはML系言語で盛んに使われている
        \dfnje{ファンクタ}{functor}の仕組みを導入してもよいかもしれない．
      }
      +desc{パッケージマネージャ}{
        現代的な計算機言語では，
        多くのパッケージをインストールしたり用いたりするのにパッケージマネージャは必須である．
      }
      +desc{レコードに関する型システムの拡張}{
        現在の\SATySFi;は\cite[`Ohori1995`];に基づくレコード計算の型システムを備えているが，
        より柔軟な型システムへと拡張できないかと思案中である．
        場合によっては既にOCamlなどに取り込まれている\dfnje{列多相}{row polymorphism}
        \cite[`Remy1993`];や，或いは
        さらに強力な拡張\cite[`Osinski2006`];に切り替えることも検討するかもしれない．
      }
      +desc{末尾再帰最適化}{
        計算上高いパフォーマンスを求められる用途ではないため，
        \SATySFi;は特に組版処理前に顕著な最適化をしない．
        実際（行分割処理など内部的な処理ではなく）
        パッケージレヴェルで記述された処理は
        ほとんどが入力に対して線型で済むような処理である．
        しかし，実用上PEG構文解析器など複雑な処理を要する場面もあり，
        或る程度基本的な最適化を行なう必要性を感じつつある．
        その最たるものが末尾再帰最適化である．
      }
    >
    +desc{CFF系OpenTypeフォントの部分埋め込み}{
      OpenTypeフォントには，大別して

      \listing{
        * \code(`glyf`);や\code(`loca`);などのテーブルによって
          グリフ情報が格納されている
          \dfn{TrueTypeアウトライン系}のもの

        * \code(`CFF`);テーブルなどによってそれらの情報が格納されている
          \dfn{CFFアウトライン系}のもの
      }%

      の2種類がある．
      \SATySFi;は\code(`otfm`); \cite[`otfm`];という
      著者が大幅に拡張したOpenTypeフォントデコーダによって
      自前でフォントをデコードして使っている．
      部分埋め込みも自前で行なっているのだが，
      TrueType系のOpenTypeフォントには対応しているものの
      CFF系のOpenTypeフォントはまだ部分埋め込みできない．
      そのため，現状では

      \listing{
        * CFFアウトラインをもつ非TrueType CollectionのOpenTypeフォントは
          全部埋め込みされ，出力されるPDFの容量はかなり大きくなる

        * CFFアウトラインをもつTrueType CollectionのOpenTypeフォントは
          （PDFの仕様上全部埋め込みできないため）使用できない
      }%

      という状況である．\code(`CFF`);テーブルの部分埋め込みを実装し，これを改善したい．
    }
    +desc{画像読み込みのGIF，PNG等対応}{
      プリミティヴ\codem{load-image}は（色空間がCMYK以外の）JPEGのみに対応しているが，
      これを色空間がCMYKのJPEGやGIF，PNG等に拡張したい．
    }
    +desc{タグつきPDFの出力}{
      PDF 1.7には，PDFファイルに “マークアップ情報” を埋め込む機能がある．
      これの出力に関するプリミティヴを実装したい．
    }
    +desc{相対パスの扱い，プリプロセッサ}{
      現在の\SATySFi;の実装に於いて，
      \codem{load-image}などのパスを文字列として受け取るプリミティヴは，
      相対パスが渡されたときには
      \SATySFi;が起動されたカレントディレクトリからの相対パスとして解釈される．
      これは文書を構成する（システムにインストールされたパッケージ以外の）ファイルが
      複数のディレクトリに跨がる場合には特に著しく不便な性質だ．
      これを改善するため，
      相対パスを静的に絶対パスへと変換できるようなプリプロセスを何らかの形で導入したい．
      さらにいえば，長期的な目標ではあるが，
      より一般性の高い，OCamlでいうPPXに相当するようなプリプロセッサ機能を導入したいとも考えている．
    }
    +desc{テキスト処理文脈が保持する情報を拡張する機能}{
      現状ではテキスト処理文脈が保持できる情報は事前に決められており，
      ユーザやパッケージ開発者が増設することはできない．
      これを可能にする言語機能を提供したい．具体的には

      \d-codem{
        context-entry \meta{entry-name} : \meta{type} = \meta{default}
      }%

      といった構文でテキスト処理文脈が新たにもつ “エントリー” を宣言でき，
      実際にその情報に\codem{ctx\#\#\meta{entry-name}}でアクセスしたり，
      \codem{update-entry}という新しい予約語の字句を使った構文
      \codem{\meta{ctx} \|\> update-entry \#\#\meta{entry-name} \meta{v}}
      で更新したりできるようにしたい．
    }
  >
  +section{既存機能の破壊的な変更}<
%    +desc{フォント読み込みの機構}{
%    }
    +desc{テキスト処理}{
      ひとまずそれらしく和欧混植ができるようにすることを目標として実装したため，
      文字組版に関してかなりアドホックな点が多い．
      現在いくらか見受けられる奇妙な形式化を改め，かつ多言語組版への対応を志向し，
      より一般性の高いテキスト処理を追求したい．
    }
    +desc{プリミティヴのインターフェイス変更}{
      \codem{line-break}が段落の上下でページ分割してよいかを
      第1引数と第2引数で受け取るという形式をとっていることや，
      段落の上下のマージンを\codem{set-paragraph-margin}を介して設定する方式になっていることなど，
      現状の\SATySFi;にはエレガントでもなければ実用上便利でもないような
      インターフェイスをもつプリミティヴがいくらかある．
      互換性を損なうためタイミングには注意を要するが，
      可能であればこれらの機構はよりスマートな形式化に改めたい．
    }
    +desc{graphicとgraphic list}{
      グラフィックスに関する型の現状の形式化は，
      \type(Type.(list graphics));型と\type(Type.(graphics));型の
      “立場的な違い” がほとんどない．これらを\type(Type.(graphics));型に統一し，

      \val({concat-graphics})(Type.((list graphics) --> graphics));%

      のようなプリミティヴを追加することを検討したい．
    }
  >
>
