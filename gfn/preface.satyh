% -*- coding: utf-8 -*-
@import: settings

let preface = '<
  +p{
    本書は，2017年度未踏事業のひとつとして筆者が開発し，
    2018年12月現在も発展を続けている新しい組版処理システム\SATySFi;について
    解説することを目的としたものである．
    \SATySFi;はマークアップ言語（およびその下層にあるプログラミング言語）
    とそれに対する処理系からなっており，
    ユーザがコードとして文書を執筆してそれを処理系に渡すと
    その指定に従って組版処理が行なわれPDFが生成される，という仕組みをもつ．
  }
  +p{
    このような形態をもつ既存の組版処理システムとしては，
    主に理工系分野の論文組版等に広く用いられている\dfn{\TeX;}/\dfn{\LaTeX;}がある．
    「既に広く使われている実績のある同様の役割のソフトウェアがあるのに，
    新たに創る必要があったのだろうか？」と思われるかもしれない．
    単純な疑問として，\SATySFi;のどのような性質が「未踏」だったのだろうか？
  }
  +p{
    結論から言うと，最大の違いは組版処理機能そのものではなく，

    \listing{
      * コマンド\footnote{
          \LaTeX;に親しみのない読者には奇異に聞こえるかもしれないが，
          文書中のマークアップや組版処理の指定が関連づけられたタグのようなものを広く「コマンド」と呼ぶ．
        }定義がどの程度簡単にでき，どの程度その定義の可読性が高いか
      * 不適格な入力に対してどのようにエラーが報告されるか
    }%

    にある．
    \SATySFi;はマークアップ言語であると同時にいわゆる函数型言語らしい特徴も多く備えており，
    そのおかげでコマンド定義を通常のプログラミングの感覚で読み書きできるようになっている．
    これは，\TeX;/\LaTeX;の「少し凝ったコマンドを定義するには
    \TeX;言語独特の項書き換えの仕組みを理解し，多くの場合直観に反した実装を書かねばならず，デバッグも難しい」
    という性質とは対照的である．
    さらに，函数型らしい言語設計を採用していることの恩恵として強力な型システムを搭載しており，
    \SATySFi;はユーザが或る種の不適格な入力を与えた際には
    その型システムを用いて組版処理を行なうよりも前にそれを検出し，
    （多くの場合）入力ミスの箇所が特定しやすいエラーを提示してくれる．
    これもやはり\TeX;/\LaTeX;が「ひとまず受け取ったソースに基づいて組版処理をしはじめ，
    その途中で不整合に出くわしたらそのとき初めてエラーを出す」
    という仕組みをとっているのとは対照的であり，
    このようなエラー報告の仕組みにより
    \SATySFi;には従来システムに比べて高い執筆効率が期待できるのである．
  }
  +p{
    以上が\SATySFi;の開発動機の非常に大雑把な概要だが，
    おそらくまだまだ「本当に有用なのか？」という疑問を払拭しきれない読者もいらっしゃるかと思う．
    どのような経緯で現在の\SATySFi;の形態に至ったのか，
    どのような点で既存システムと差別化されるのかについては，
    \ref-chapter(`introduction`);でさらに詳細に述べたので参照されたい．
    なお，既に「早く\SATySFi;を使いたい，
    有用性云々をくどくど述べられるよりは先にコードの書き方を知りたい」
    というお気持ちの読者は，\ref-chapter(`introduction`);は読み飛ばしても構わない．
    \SATySFi;コードの入力で画面を凝視し続けたためになかなか寝つけない夜，
    ふと本書の\ref-chapter(`introduction`);に目を通していなかったことを思い出し，
    カモミールティーでも淹れて眠気がくるまでの時間に一瞥し，
    「なるほど」と感じていただければ筆者としては本望だ．
  }
  +p{
    さて，本書の構成について述べよう．
    \SATySFi;を構成する各部分は複雑に依存し合っており，
    各部分を別個に，つまり他の部分から完全に独立したものとしていきなり理解するのはかなり困難である．
    そのため，本書は全体として
    「前の方では大雑把な理解のしかたを伝え，後ろへ行くにしたがってより一般性の高い説明に改める」
    という方針で構成されている．
    したがって，第2章以降はできるだけ前から順に読み進めることをおすすめする．
  }
  +p{
    \ref-chapter(`getting-started`);ではまず
    \pkg{stdjareport}というクラスファイルが定義しているコマンド類の用法の説明を通じて
    \SATySFi;で文書をどのように執筆すればよいのかという感覚を掴んでもらう．
    この章を参考にすれば，読者は（自前で定義したコマンドを含まない）最低限の簡素な文書が記述できるようになる．
　}
  +p{
    \ref-chapter(`basic-command-definition`);ではユーザが自らの手でコマンドを定義する方法のごく初歩を説明する．
    この章の後半ではプログラミング言語としての\SATySFi;に触れ始めるので，
    いわゆる函数型プログラミングに馴染みのない読者にとっては新たな直観を獲得する場となり，
    多少腰を据えて読んでもらうことになるかもしれない（といっても，世間で噂されているほど難易度の高い概念では決してない）．
    また，この章では\SATySFi;の組版処理システムとしての最大の特徴である型システムについて触れはじめる．
    すなわち，どのような文書やパッケージの記述を型がつく整合したものとして組版処理に渡し，
    一方でどのような記述を何らかの不整合を含むものとして拒否するのかを規定した仕組みである
    型検査器について軽く触れる．
    といっても，ここで触れるのは
    \SATySFi;の型システムのうちでもOCamlやF\#といった
    いわゆる函数型言語のそれと大枠を同じくする部分がメインである．
  }
  +p{
    \ref-chapter(`overall-structure`);では\SATySFi;の処理系の全体像について説明し，
    各部分がどんな処理を担っているかを概観する．
    処理系がやっていることの全体像は，\TeX;の処理系やブラウザのレンダリングエンジンがやっていることと比べて
    きわめて顕著な差があるわけではないが，
    \SATySFi;での種々のデータの型による扱いがどのような定式化を経て確立されているか，
    組版処理の根幹となるプリミティヴ\footnote{言語機能として備わっている，ビルトインの函数などのこと．}が
    どんな処理に対応しているのかを理解するのに把握しておくことが必須となる．
  }
  +p{
    \ref-chapter(`advanced-command-definition`);では，
    \SATySFi;の各部分の機能を読者が把握している前提で，
    組版処理そのものに手を加えるような高度なコマンド定義の方法について解説する．
    文字サイズ，フォント指定，文字色，行送りといった文字組版に関する基礎的設定をいじったり，
    行分割に関する制御などについても説明し始める．
    また，\SATySFi;の型システムに備えられた，
    （汎用の計算機言語には見られない）組版処理に由来する独特の型の扱いもここで詳しく触れる．
    \SATySFi;のあらゆる仕組みはこの型システムでできるだけ静的に不整合を検出することに合わせて構築されており，
    ここ以前の説明で読者が「どうしてこんな少し回りくどい仕組みになっているのだろう」と抱いた疑問の伏線は，
    おそらくここで回収されるだろう．
  }
  +p{
    \ref-chapter(`line-breaking`);から\ref-chapter(`page-breaking`);までは各論的で，
    それぞれ
    行分割処理，
    システムと設定ファイル，
    文字組版，
    グラフィックス，
    数式組版，
    相互参照，
    ページ分割処理
    について解説する．各章で関連するいくつものプリミティヴが紹介され，
    ユーザやパッケージ開発者はこれを用いてより柔軟に組版処理を制御するコマンドを定義することができる．
  }
  +p{
    残りの章はかなり詳細に\SATySFi;を知りたい，
    さらには\SATySFi;本体の開発に手を入れてみたい，と考える方に向けて掲載した内容である．
    \ref-chapter(`future-work`);では\SATySFi;の現在のあり方の改善点や今後拡張・追加したい機能について述べる．
    特に，現在実装を進めている\dfnje{テキストモード}{text mode}，
    つまり（PDFではなく）テキストファイルを出力するモードについても触れる．
    このモードのおかげで，同一の\SATySFi;文書からPDFと（HTMLや\LaTeX;などの）ソースファイルとが
    （適切なパッケージが揃っている下で）共に出力できるようになる．
    \ref-chapter(`specification`);では，\SATySFi;のごく小さなサブセットの言語について，
    構文，操作的意味論，型システムなどを厳密に与える．これは本当に物好きな読者や，
    或いは計算機言語理論を専門としていて\SATySFi;がどのように形式化されているのか気になる方々に向けた章であり，
    おそらく全く読まなくても実用上差し支えないだろう．
  }
  +p{
    以上が本書の構成であるが，future workについて記載した\ref-chapter(`future-work`);が
    大々的に設けられていることからもわかるように，\SATySFi;はまだまだ試行錯誤の段階にある．
    したがって，これは著者の或る種のワガママなのだが，
    読者には本書を「今後ずっと参照できる\SATySFi;の参考書」のように捉えるよりは
    「\SATySFi;が辿る歴史の1つの節目をスナップショットとして記録したもの」という程度に大らかに受け止めて頂きたいと考えている．
    勿論，現状の\SATySFi;でも著者が修士論文の執筆に使った程度にはシステムとして成熟しているし，
    言語機能としても全体的にはそれなりに筋の良い形式化になっているのではなかろうかと自負しているので，
    言語機能の根幹を著しく改めるような抜本的な変更は行なわないつもりではいる．
  }
  +p{
    \SATySFi;の開発にあたっては，様々な方々からの支援を受けました．
    まず未踏事業に於いてPMの竹迫良範さん，統括PMの竹内郁雄先生をはじめとして多くの方から意見を頂き，また事業として多大な経済的支援を賜りました．
    また，成果報告会での発表以降，多くの方が善意から\SATySFi;の改善や拡張に参加してくださいました．
    \listing{
      * スタックマシンへのコンパイル機能，パターンマッチの網羅性検証，未定義変数名のエラーに対する修正候補のサジェスト機能など，
        処理系に種々のきわめて重要な拡張を施していただいた
        \person-github{Daiki Matsunaga}{matsud224}さん，

      * 字句解析器・構文解析器を整頓し \cite[`satysfi-syntax-memo`];，
        かつWindows版へのクロスコンパイル \cite[`satysfi-cross-windows`];を整備していただいた
        \person-github{Masaki Hara}{qnighy}さん，

      * 仕様書のない状態から\SATySFi;でのスライド作成用クラスファイル
        Steamer \cite[`satysfi-steamer`];を実装され，
        かつそれに伴い種々のプリミティヴの追加を提案していただいた
        \person-github{Hiromi Ishii}{konn}さん，

      * \SATySFi; Online \cite[`satysfi-online`];を実装された
        \twitter{miettal}さん，

      * \SATySFi; Playground \cite[`satysfi-playground`];を実装された
        \github{pandaman64}さん，

      * ocamlbuildからduneへの移行などOCamlでの開発に関して種々の改善を頂いた
        \person-github{Daichi Oohashi}{leque}さん，

      * インストール手順の整備，処理系の動作の整頓等に多大に協力してくださった
        \person-github{Takuma Ishikawa}{nekketsuuu}さん，
        \person-github{Yuichi Nishiwaki}{nyuichi}さん，
        \github{sakas--}さん，
        \github{objmagic}さん，
        \person-github{Masanori Ogino}{omasanori}さん，
        \person-github{Noriaki Sakamoto}{na4zagin3}さん，

      * 数式用パッケージを拡張していただいた
        \github{ToruNiina}さん，
        \github{forestaa}さん，

      * \SATySFi;の前身であるMacrodownにTravis CIを導入していただいた
        \person-github{YOSHIMURA Yuu}{y-yu}さん，

      * その他注意深い観察により修正を提示いただいた
        \github{theoldmoon0602}さん，
        \github{equal-l2}さん，
        \github{sunaemon}さん，
        \github{KilledByNLP}さん
    }%
    にはここに感謝の意を表明したいと思います．
  }
  +ragged-right{
    2018年9月\quad;
    Takashi SUWA
  }
>