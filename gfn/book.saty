% -*- coding: utf-8 -*-
@import: settings
@import: preface
@import: introduction
@import: getting-started
@import: alias-command-definition
@import: overall
@import: line-breaking
@import: cross-reference
@import: bib

document (|
  title = {The \SATySFi;book};
  author = {T. Suwa};
  preface = preface;
  bibliography = bibliography;
|) '<
  +chapter?:(`introduction`){\SATySFi;の開発動機}< #introduction; >
  +chapter?:(`getting-started`){\SATySFi;簡易入門}< #getting-started; >
  +chapter?:(`basic-command-definition`){コマンド定義：基礎編}<
    +p{
      \ref-chapter(`getting-started`);で\pkg{stdjareport}を用いて
      \SATySFi;の基礎的なコマンドの用法を知った．
      ところで，マークアップ言語の大きな強みのひとつは
      自前でコマンドを定義することによって
      種々の自動処理を実現したり独自の意味マークアップを規定したりできる点にあったはずである．
      実際，\codem{+chapter}とか\codem{+p}とか\codem{\\dfn}とかいった
      コマンドたちは単に\pkg{stdjareport}クラスによって定義が提供されているだけであり，
      その気になればユーザでも同様の定義を書いたりできるはずだ．
      そろそろ自前でコマンドを定義したくてうずうずしている読者も多いかと思う．
      この章では，コマンド定義のごく基礎的な方法を紹介する．
      あらかじめ言ってしまうとここでの説明はとてもアドホックなものになっており，
      \SATySFi;をよく理解されたのちにこの章を読めば
      「こんな子供騙しな説明をしていたのか」と驚かれるかもしれないが，
      読者の様々なバックグラウンドを鑑み，
      まず最初の一歩としておおまかに把握してもらうには良い説明だろうと
      判断してのことなのでご容赦願いたいと思う．
      より深い理解を獲得し，より柔軟で幅広い種類の処理をコマンドとして定義するには，
      \ref-chapter(`overall-structure`);で
      \SATySFi;が行なっている組版処理の全体像を把握した上で
      \ref-chapter(`advanced-command-definition`);に臨んでいただきたい．
    }
    +section{簡単なエイリアス}< #alias-command-definition; >
    +section{プログラミング言語としての\SATySFi;}<
      +p{
        既に述べたように，\SATySFi;はいわゆる函数型らしい特徴を兼ね備えた
        組版処理向けのマークアップ言語である．
        むしろ，より正確を期して言い表すならば
        値呼びの函数型言語の上に組版処理用の種々の言語機能が分厚く搭載された
        DSL（domain-specific language, 領域特化言語）だ．
        プログラミング言語としての\SATySFi;の基礎的部分には
        OCamlに大変よく似た体系が採用されており，
        基礎的部分の理解を得るのにOCamlに関する参考書で代用することも十分可能なほどである．
        とはいえ，OCamlなどの他言語から回り道せずとも\SATySFi;での最低限の直観を身につければ
        十分\SATySFi;でのプログラミングが可能であり，
        熱心に函数型プログラミングの基礎を習得したい読者ばかりではないであろうから，
        ここでも簡単にプログラミング言語としての\SATySFi;について解説する．
        また，OCamlと\SATySFi;との間には目的意識や美意識の違いに起因した多少の差異があるので，
        これについて（既にOCamlで流暢にプログラミングできる読者に対しても）簡単に補足する．
      }
      +subsection{式と値}<
        +p{
          \SATySFi;には対話環境が特に整備されていないので，
          プログラムの計算結果をPDFに出力して確かめることにしよう．
          ひとまず以下のようなコードを見てほしい：

          \d-code(```
            @require: stdjareport

            let-inline \show-int n =
              embed-string (arabic n)
            in

            document (|
              title = {Programming in \SATySFi;};
              author = {計 算太郎};
            |) '<
              +p{ Answer: \show-int(40 + 2); }
            >
          ```);%

          \codem{let-inline}から始まる，
          未知でありながら前節で見たインラインコマンドを定義する方法によく似た構文があるが，
          実際これは\codem{\\show-int}というインラインコマンドの定義である．
          この定義をどう読むのかは後々わかることになるので，
          今の段階では
          「与えられた整数を版面に文字として10進法で出力するコマンド\codem{\\show-int}」
          を定義するオマジナイだと思っていただきたい．
          注目されたいのは\codem{\\show-int}を使う部分，すなわち

          \d-code(```
            ​  +p{ Answer: \show-int(40 + 2); }
          ```);%

          である．丸括弧に囲まれた\codem{40 + 2}という怪しげな記述がある．
          とりあえず，この文書を\SATySFi;処理系にかけてみると，
          この段落に相当する部分は

          \d-block(open Sample in '<
            +p{ Answer: \show-int(40 + 2); }
          >);%

          と出力される．そう，${40} と ${2} の和が計算されているのである．
          平たく言えば，こういった “計算をする処理” がプログラムの仕事の根幹であり，
          “計算をする処理” をプログラムとして記述することをプログラミングと呼ぶ．
          \codem{40 + 2}のような記述は
          \dfnje{\index(`シキ`){式}}{expression}
          またはしばしば
          \dfnje{\index(`コウ`){項}}{term}と呼ばれ，
          式を適切な構文にしたがって組み立てることでプログラムが構築される\footnote{
            C言語やPythonなどの
            “手続き的な” 観点に強く基づいている計算機言語に馴染みのある読者は
            「式から文をつくり，文からプログラムを構築するのではないか？」
            と思われるかもしれないが，
            \SATySFi;に文の概念はない．
            というか，式の特殊な場合が “手続き的な” 言語に備わっている文に相当するのである．
            これはOCamlをはじめとする多くのいわゆる函数型言語に共通する性質である．
          }．
        }
        +p{
          \codem{40 + 2}の “計算が進んで” \codem{42}になったように，
          式は一般に “それ以上計算しない式” へと “うつりかわっていく”．
          この “うつりかわり” の過程を
          \dfnje{\index(`ヒョウカ`){評価}}{evaluation}
          またはしばしば
          \dfnje{\index(`カンヤク`){簡約}}{reduction}
          と呼び， “それ以上計算しない式” を
          \dfnje{\index(`コウブンテキアタイ`){構文的値}}{syntactic value}
          或いは単に
          \dfnje{\index(`アタイ`){値}}{value}
          と呼ぶ．
          プログラムの動作とは，式を評価して値を求めることなのである．
        }
        +p{
          \REMAINS{2項演算子の結合優先度}
        }
      >
      +section{変数とその束縛}<
        +p{
          \REMAINS{変数の概念とlet式}
        }
        +p{
          \REMAINS{変数名}
        }
      >
      +section{基本的なデータと型}<
        +p{
          \REMAINS{整数，文字列，浮動小数点数，長さ，真偽値}
        }
      >
      +section{函数と条件分岐}<
        +p{
          \REMAINS{函数定義と条件分岐}
        }
      >
      +section{代数的データ型}<
        +p{
          \REMAINS{代数的データ型}
        }
      >
      +section{再帰函数}<
        +p{
          \REMAINS{再帰函数}
        }
      >
    >
  >
  +chapter?:(`overall-structure`){文書が処理される仕組み}< #overall; >
  +chapter?:(`type-system`){型システム}<
    +p{
      既に\ref-chapter(`introduction`);で述べたとおり，
      \SATySFi;の最大の特徴は型検査器を備えているおかげで
      或る種の入力の誤りを実際に組版処理を始めるよりも前に検出してすばやく報告できることにある．
      本章では，この型検査器を実現している型システムについて見ていくことにしよう．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`advanced-command-definition`){コマンド定義：発展編}<
    +p{
      \ref-chapter(`basic-command-definition`);
      で基礎的なコマンド定義の方法およびプログラミング言語としての\SATySFi;について習得し，
      \ref-chapter(`overall-structure`);で\SATySFi;の処理系の全体像，
      および各工程がどのように定式化されているかについて概観した．
      これらの前提知識を把握した下で，この章ではようやくフォントや文字色，行送りといった，
      “組版上の装飾的な視覚情報” にも関わる処理を行なうコマンドの実装方法を習得する．
    }
    +section?:(`text-processing-context`){テキスト処理文脈}<
      +p{
        \ref-chapter(`overall-structure`);でも既に述べたが，
        組版処理はインラインテキスト・ブロックテキストといった
        “テキストの情報” だけが与えられてもできない．
        すなわち，どのフォントのどんなサイズで組むか\footnote{
          活版印刷の慣習としては，“font” という語は
          各字形が同一のデザインに則っているだけでなく
          サイズも相等しいひと揃いの活字のセットを指したようだが，
          \SATySFi;でフォントと言う場合は
          （字形やそれに関するメトリックのひとかたまりに紐づけられた）フォント名，
          拡大縮小比率，ベースライン調整率
          の3つ組を指す．詳しくは\ref-chapter(`typography`);で述べる．
        }，段落の幅や行送りはどの程度の長さにするか，
        といった情報が “テキストの情報” に加えて必要である．
        これらの
        “テキストには表れていないが組版処理上必要な情報”
        を，\SATySFi;は
        \dfnje{\index(`テキスト処理文脈`){テキスト処理文脈}}{text-processing context}
        という機構に保持させて扱う．
        抽象的な説明を続けてもおそらく要領を得ないであろうから，
        具体例を用いて説明しよう．
        例えば，文字サイズを1.5倍に変更するコマンド\codem{\\enlarge}を考える：

        \d-code-and-block(```
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        ```)(open Sample in '<
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        >);%

        このような\codem{\\enlarge}は次のように定義できる：

        \d-code(```
          let-inline ctx \enlarge it =
            let size = get-font-size ctx in
            let ctx-enlarge = set-font-size (size *' 1.5) ctx in
              read-inline ctx-enlarge it
        ```);%

        唐突に全部見せられてもあまり実感が湧かないであろうから少しずつ説明するが，
        まず1行目から見慣れない文法である．
        \codem{let-inline}を用いてインラインコマンドを定義する構文は
        \ref-chapter(`basic-command-definition`);で既に紹介したが，
        ここでは\codem{let-inline}と定義されるコマンド名\codem{\\enlarge}との間に
        \codem{ctx}なる何かがある．
        実はこれこそがテキスト処理文脈を受け取る “第0引数” の変数だ．
        コマンドの適用が評価されるとき，
        ユーザが与えた通常の引数に加えて，コマンドが使われている箇所のすぐ外側の
        テキスト処理文脈がこの変数\codem{ctx}に渡され，
        コマンドの実装中で使える，というわけである．
        ここまで\pkg{stdjareport}など
        何らかのクラスファイルが提供するマークアップ等の方式に従って
        \SATySFi;を使うにあたってはテキスト処理文脈を全く意識する必要がなかったであろうけれども，
        実のところユーザからは見えない裏側で
        密かに各コマンドがテキスト処理文脈を受け渡ししていたのである．
        なお，\codem{ctx}は単に変数名なので，第0引数に\codem{x}とか\codem{y}とか
        \codem{i-love-satysfi}といった違う名前を使っても構わない\footnote{
          ただし，既存のパッケージでは慣習的に第0引数を必ず\codem{ctx}という変数名にしているので，
          複数人で開発したり，既存パッケージを改造したりする場合は
          \codem{ctx}という変数名で統一した方が理解に齟齬を生じにくいかもしれない．
        }．
      }
      +p{
        さて，続いてコマンド定義の “中身” を見てみる．
        第0引数の\codem{ctx}と（各適用でユーザが与える）第1引数\codem{it}を使うのだが，
        まず\codem{size}に
        外から渡されてきたテキスト処理文脈\codem{ctx}が保持している
        フォントサイズを取り出して束縛する．これはプリミティヴ：

        \val?:(`get-font-size`)({get-font-size})%
          (Type.(context --> length));%

        を用いて行なう．取得したフォントサイズ\codem{size}は\type(Type.(length));型であり，

        \val?:(`*'`)({(\*')})(Type.(length --> (float --> length)));%

        を用いて\codem{size \*' 1.5}で${1.5}倍の長さを得る．
        フォントサイズの設定は

        \val?:(`set-font-size`)({set-font-size})%
          (Type.(length --> (context --> context)));%

        を用いて行なう．
        すなわち，古いテキスト処理文脈\codem{ctx}と設定するフォントサイズ\codem{size}に対して
        \codem{set-font-size size ctx}で
        フォントサイズの更新された新しいテキスト処理文脈が返ってくる．
        \codem{\\enlarge}の実装では，この新しいテキスト処理文脈を
        変数\codem{ctx-enlarge}に束縛している．
        なお，ここの一連の処理で
        \codem{ctx}の内容が “書き換えられる” わけではないことに注意されたい．
        単に\codem{ctx}の内容のうちフォントサイズに関するデータだけが
        \codem{size}に変更された新しいテキスト処理文脈がつくられて
        \codem{ctx-enlarge}という変数に束縛されているだけである．
        実際，\codem{ctx-enlarge}が束縛されたスコープでも
        依然として\codem{ctx}を使うことができ，
        かつそのテキスト処理文脈には元々のフォントサイズが保持されている．
      }
      +p{
        最も重要なのは最終行だ．ここで使われているプリミティヴ

        \val?:(`read-inline`)({read-inline})%
          (Type.(context --> (inline-text --> inline-boxes)));%

        は\ref-chapter(`overall-structure`);で説明した
        インライン変換器に相当し，\ref-figure(`conversion-to-inline-boxes`);
        に示されたような処理をしている．すなわち，
        \codem{read-inline \meta{ctx} \meta{it}}で
        テキスト処理文脈\codem{\meta{ctx}}の保持するフォントや
        文字サイズなどの情報をもとにインラインテキスト\codem{\meta{it}}を
        インラインボックス列へと変換する．
        そしてこれがきわめて重要な事項なのだが，
        インラインテキスト\codem{\meta{it}}に含まれている
        インラインコマンドの適用が評価されるのも，
        この\codem{read-inline}によるインラインボックス列への変換の最中である．
        このとき，\codem{read-inline}に第1引数として渡したテキスト処理文脈が，
        第2引数の\codem{\meta{it}}中の各コマンド適用を評価するときに
        第0引数として渡されるのである．
      }
    >
    +p{
      \REMAINS{コマンドが処理されるアニメーション}
    }
    +p{
      \REMAINS{let-inlineによるエイリアス定義は糖衣構文}
    }
    +p{
      \REMAINS{発展的なコマンド定義：line-break}
    }
  >
  +chapter?:(`line-breaking`){行分割処理}< #line-breaking; >
  +chapter?:(`typography`){文字組版}<
    +p{
      文字は組版処理の主役であり，そして最も人間くささゆえの複雑性を備えた組版処理対象だ．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`graphics`){グラフィックス}<
    +p{
      版面を構成する文字以外の要素で重要なのがグラフィックスである．
      本章では，本文の囲み枠，表の罫線，幾何図形，直交座標系のグラフ，グラフ理論のグラフ，可換図式，
      さらには数式中の “連続的に伸縮する” 括弧といった多様な対象を描画する用途で活用できる
      \SATySFi;のグラフィックスの機能について紹介する．
      一読すればわかるようにグラフィックス用のプリミティヴは非常にプリミティヴなのだが，
      そのプリミティヴさゆえに，思い立てばユーザの手によって非常に柔軟な描画が指定できる．
      また，頻出する図形や囲み枠の指定については
      \pkg{gr}，\pkg{deco}，\pkg{hdecoset}，\pkg{vdecoset}
      などのライブラリで提供されており，図形定義に活用できる．
    }
    +section{パス}<
      +p{
        \dfnje{\index(`パス`){パス}}{path}は
        曲線や閉曲線およびそれが占める領域を定めた情報であり，
        グラフィックスを構成する最も基本的な単位だ．
        パスの構築は

        \listing{
          * \index(`point`){\type(Type.(point));型}：
              \type(Type.(product [length; length]));と同義，
              “${2} 次元座標” や “${2} 次元ベクトル” の型として使う
        }

        という型シノニムと

        \listing{
          * \index(`pre-path`){\type(Type.(pre-path));型}：
              \dfnje{\index(`ミカンパス`){未完パス}}{pre-path}，
              すなわちまだ閉じたり終了したりしていない伸ばす途中のパスの型
          * \index(`path`){\type(Type.(path));}型：
              完成したパスの型
        }%

        という2つの基本型を用いて，以下に挙げるようなプリミティヴで行なう．
        座標はページの左下を ${\tuple{|0|0|}} とする絶対座標で，
        版面上の右向きが ${+x}方向，上向きが ${+y} 方向である\footnote{
          ${y} 座標が上向きに伸びるのは違和感があるかもしれないが，
          これはPDFの仕様の “最も基本的な座標系” にそのまま従ったものだ．
        }．
        これだけ聞くと絶対座標でパスの各点を指定することについては
        あまりにもプリミティヴすぎるのではないかと違和感を覚えるかもしれないが，
        以下で紹介するプリミティヴ\codem{shift-path}を用いて相対座標を扱うことができるので，
        ひとまず心配しないでいただきたい．

        \val-explain?:(`start-path`)({start-path})%
          (Type.(point --> pre-path)) {
            第1引数に指定した点から未完パスを開始する．
          }
        \val-explain?:(`line-to`)({line-to})%
          (Type.(point --> (pre-path --> pre-path))) {
            \codem{\meta{prepath} \|\> line-to \meta{v}}で
            未完パス\codem{\meta{prepath}}を終点から
            点\codem{\meta{v}}へと線分で延長したものを返す．
          }
        \val-explain?:(`bezier-to`)({bezier-to})%
          (Type.(point --> (point --> (point --> (pre-path --> pre-path))))) {
            \codem{\meta{prepath} \|\>
              bezier-to \metasub(${1}){u} \metasub(${2}){u} \meta{v}}
            で未完パス\codem{\meta{prepath}}を
            終点から点\codem{\meta{v}}へとBézier曲線で延長したものを返す．
            \codem{\metasub(${1}){u}}と\codem{\metasub(${2}){u}}は制御点である．
          }
        \val-explain?:(`close-with-line`)({close-with-line})%
          (Type.(pre-path --> path)) {
            未完パスを受け取り，起点と終点を線分で結んで閉じてできるパスを返す．
          }
        \val-explain?:(`close-with-bezier`)({close-with-bezier})%
          (Type.(point --> (point --> (pre-path --> path)))) {
            \codem{\meta{prepath} \|\>
              close-with-bezier \metasub(${1}){u} \metasub(${2}){u}}で
            未完パス\codem{\meta{prepath}}の起点と終点を
            制御点\codem{\metasub(${1}){u}}，\codem{\metasub(${2}){u}}の
            Bézier曲線で結んで閉じてできるパスを返す．
          }
        \val-explain?:(`terminate-path`)({terminate-path})%
          (Type.(pre-path --> path)) {
            未完パスを受け取り，開いたままのパスとして返す．
          }
        \val-explain?:(`unite-path`)({unite-path})%
          (Type.(path --> (path --> path))) {
            2つのパスを統合して1つにする．
            これはドーナツ形など中空のパスをつくるのに必須である\footnote{
              点がパスの “内側” であるか否かは，
              その点を囲んでいるパスの回転数の総和の偶奇によって決まっている．
            }．
          }
        \val-explain?:(`shift-path`)({shift-path})%
          (Type.(point --> (path --> path))) {
            \codem{\meta{path} \|\> shift-path \meta{v}}で
            パス\codem{\meta{path}}の位置を\codem{\meta{v}}だけずらす．
          }
        \val-explain?:(`get-path-bbox`)({get-path-bbox})%
          (Type.(path --> product [point; point])) {
            パスを受け取り，そのパスのバウンディングボックスの左下と右上の座標の組を返す．
            すなわち，与えられたパスが占める領域のうち
            ${x} 座標がとる最小値と ${y} 座標がとる最小値の組
            ${\tuple{|x_{\mathrm{min}}|y_{\mathrm{min}}|}}と，
            ${x} 座標がとる最大値と ${y} 座標がとる最大値の組
            ${\tuple{|x_{\mathrm{max}}|y_{\mathrm{max}}|}}との組を返す．
          }
      }
    >
    +section{グラフィックス指定}<
      +p{
        パス，つまり\type(Type.(path));型の値は，単に曲線や閉曲線のデータ，
        さらにいえばどんな領域を占めているかの情報であり，それ自体が描けるものではない．
        実際にそのパスに基づいて文書中に図形を挿入するには，
        それがどんな色で塗られるかとか，あるいはどんな枠線で描かれるかといった情報を与える必要がある．
        パスに加えてそれらの情報を持っているのが\type(Type.(graphics));型の値である．
        これは以下のプリミティヴを用いてつくる．

        \val-explain?:(`fill`)({fill})%
          (Type.(color --> (path --> graphics))) {
            \codem{fill \meta{color} \meta{path}}で
            パス\codem{\meta{path}}の内側を色\codem{\meta{color}}で塗った
            グラフィックスを返す．
          }
        \val-explain?:(`stroke`)({stroke})%
          (Type.(length --> (color --> (path --> graphics)))) {
            \codem{stroke \meta{t} \meta{color} \meta{path}}で
            パス\codem{\meta{path}}を幅\codem{\meta{t}}，
            色\codem{\meta{color}}の線として描いたグラフィックスを返す．
          }
        \val-explain?:(`draw-text`)({draw-text})%
          (Type.(point --> (inline-boxes --> graphics))) {
            \codem{draw-text \meta{v} \meta{ib}}で
            位置\codem{\meta{v}}を参照点として
            インラインボックス列\codem{\meta{ib}}を置いたグラフィックスを返す．
          }
        \val-explain?:(`shift-graphics`)({shift-graphics})%
          (Type.(point --> (graphics --> graphics))) {
            第1引数の分だけ第2引数のグラフィックスの座標をずらす．
          }
        \val-explain?:(`get-graphics-bbox`)({get-graphics-bbox})%
          (Type.(graphics --> product [point; point])) {
            \codem{get-path-bbox}と同じ要領で
            与えられたグラフィックスのバウンディングボックスを返す．
            ストロークの太さは考慮されないことに注意．
          }
      }
      +p{
        さて，グラフィックスの構成は上に掲げたプリミティヴを用いればよいが，
        実際に本文中にグラフィックスを挿入するにはどうすればいいのだろうか．
        このために用意されているのがプリミティヴ：

        \val?:(`inline-graphics`)({inline-graphics})%
          (Type.(length --> (length --> (length -->
            ((point --> list graphics) --> inline-boxes)))));%

        である．これは
        \codem{inline-graphics \meta{w} \meta{h} \meta{d} \meta{grf}}
        という形で使うことでインラインボックス列を得る．
        最初の3つの引数は寸法の指定で，
        \codem{\meta{w}}が横幅，
        \codem{\meta{h}}が高さ，
        \codem{\meta{d}}が深さである．
        要するにグラフィックスは大きい1文字のようなものとして扱うのだが，
        どのような寸法の文字として扱って欲しいかを指定しているのである．
        そして重要なのは第4引数\codem{\meta{grf}}で，
        これは座標を受け取ってグラフィックスのリストを返す函数である．
        \SATySFi;はまずグラフィックスの内容が確定していない段階で
        寸法だけを用いて（行分割処理やページ分割処理を経て）
        実際に版面のどの位置に配置されるかを決定し，
        位置が確定してからその参照点${\tuple{|x|y|}}を
        指定されていた函数\codem{\meta{grf}}に引数として渡す．
        そしてその返り値としてできたグラフィックスのリストをそこに描き込む，
        という仕組みになっている．
      }
      +example{
        指定されたテキストが現在のフォントで占める領域と同じ範囲をバツ印つきの長方形の枠にして
        出力するコマンド，すなわち以下のような記述と組版結果を実現するコマンド
        \codem{\\area}を考える：

        \d-code-and-block(```
          +p{ The quick brown fox jumps over the lazy dog. }
          +p{ The quick \area{brown} fox jumps over the \area{lazy} dog. }
        ```)(open Sample in '<
          +p-alph{ The quick brown fox jumps over the lazy dog. }
          +p-alph{ The quick \area{brown} fox jumps over the \area{lazy} dog. }
        >);%

        このような\codem{\\area}は次のように
        \codem{inline-graphics}および
        \index(`get-natural-metrics`)?:({\code(`get-natural-metrics`);})%
          {\codem{get-natural-metrics}}
        を用いて定義することができる：

        \d-code(```
          let-inline ctx \area it =
            let ib = read-inline ctx it in
            let (w, h, d) = get-natural-metrics ib in
            let thickness = 0.5pt in
            let color = Color.black in
              inline-graphics w h d (fun (x, y) ->
                [
                  stroke thickness color
                    (start-path (x, y -' d)
                      |> line-to (x +' w, y -' d)
                      |> line-to (x +' w, y +' h)
                      |> line-to (x, y +' h)
                      |> close-with-line);

                  stroke thickness color
                    (start-path (x, y -' d)
                      |> line-to (x +' w, y +' h)
                      |> terminate-path);

                  stroke thickness color
                    (start-path (x, y +' h)
                      |> line-to (x +' w, y -' d)
                      |> terminate-path);
                ]
              )
        ```);
      }
      +p{
        なお，上での説明からもわかるとおり，
        第4引数\codem{\meta{grf}}の “中身” が評価されるタイミングは
        注意が必要である．\REMAINS{続き}

      }
    >
    +section{囲み枠}<
      +p{ \REMAINS{囲み枠} }
    >
    +section{表組版}<
      +p{ \REMAINS{表組版} }
    >
    +section{画像}<
      +p{
        まだ幾分か簡素であるものの，\SATySFi;は
        （ベクタでない，ピクセルが四方に並んだ）画像を取り扱う方法も備えている．
        画像のデータがもつ型として\type(Type.(image));型が用意されており，
        以下のようなプリミティヴを使うことができる：

        \val-explain?:(`load-image`)({load-image})%
          (Type.(string --> image)) {
            与えられたパスの画像を読み込む．
            現在は色空間がCYMKでないJPEGのみ対応している．
            ファイルが存在しない場合は実行時エラーを出して終了する．
          }%

        \val-explain?:(`load-pdf-image`)({load-pdf-image})%
          (Type.(string --> (int --> image))) {
            第1引数に与えられたパスのPDFを読み込み，
            第2引数に与えられたページ番号の内容を画像として返す．
            ページ番号は最初のページを ${1} とする．
            与えられたファイルが存在しなかったり，
            与えられたページ番号のページが存在しない場合は
            実行時エラーを出して終了する．
          }%

        \val-explain?:(`use-image-by-width`)({use-image-by-width})%
          (Type.(image --> (length --> inline-boxes))) {
            第1引数に与えられた画像を第2引数に与えられた長さを幅とする寸法で
            インラインボックス列として返す．
          }%
      }
    >
  >
  +chapter?:(`math`){数式組版}<
    +p{
      主に理工系の文書をしたためる者にとって，
      数式組版機能は水や空気のように当然のものとして組版処理システムに備わっていてほしいものだ．
      \TeX;/\LaTeX;が30年の長きに亘って使われ続けてきた大きな要因のひとつが，
      誰もが納得するような品質の数式組版機能を古くから提供している
      数少ない組版処理システムだったからであることにおそらく異論はないだろう．
    }
    +p{
      \SATySFi;も，\TeX;/\LaTeX;に肩を並べられるくらいの品質の数式組版機能を提供している．
      しかも，既に\ref-chapter(`getting-started`);で見たように，
      \LaTeX;そっくりの構文で書くことができる．
      数式を多大に含む文書を執筆したいという動機で既に盛んに\LaTeX;に触れていた人にとって，
      少なくとも数式の記法が\SATySFi;への移行に関する心理的障壁となることはまずないだろう．
      本章では，\SATySFi;に備わっている数式組版機能について，詳細を追って見ていくことにしよう．
    }
    +p{
      なお，繰り返しになるが，\SATySFi;での数式の記述はコードの見た目上\LaTeX;にそっくりなものの，
      裏でやっていることは両者で全然違う．
      \LaTeX;は字句解析（トークン化）に相当する処理を組版処理と同時進行で行ない，
      かつ構文木も一切構築せずパターンマッチでトークン列を書き換えていくのに対し，
      \SATySFi;は静的に構文解析して数式を構文木の形で保持している．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`cross-reference`){相互参照}< #cross-reference; >
  +chapter?:(`page-breaking`){ページ分割処理}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`primitives`){ファイル分割とモジュール}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`future-work`){Future Work}<
    +p{
      \SATySFi;は現時点でも充分実用に耐える程度に機能を備えているが，
      今後さらに拡張していきたいと考えている点がいくつもある．
      本章ではこれについて簡潔に述べることとしよう．
      端的に言ってしまえば開発に協力してくださるかもしれない方への喧伝である．
    }
    +section{機能の拡張}<
      +subsection?:(`text-mode`){テキストモード}<
        +p{ \REMAINS{} }
      >
      +subsection{文字組版機能の拡張}<
        +p{ \REMAINS{縦書き，LTR/RTL，2段組み} }
        +p{ \REMAINS{OpenTypeフィーチャのON/OFF機能} }
        +p{ \REMAINS{合字やカーニング処理の言語ごとの切り替え} }
        +p{ \REMAINS{widow, orphan} }
        +p{ \REMAINS{数式のalignment tab} }
        +p{ \REMAINS{ページ分割できる表組版} }
        +p{ \REMAINS{行長が変わる段落} }
      >
      +subsection{言語機能の拡張}<
        +p{ \REMAINS{シグネチャ，多重モジュール} }
        +p{ \REMAINS{ファンクタか型クラス} }
        +p{ \REMAINS{パッケージマネージャ} }
        +p{ \REMAINS{レコードに関する型システムの拡張} }
        +p{ \REMAINS{末尾再帰最適化} }
      >
      +p{ \REMAINS{CFF系フォントの部分埋め込み} }
      +p{ \REMAINS{画像読み込みのGIF，PNG等対応} }
      +p{ \REMAINS{タグつきPDFの出力} }
      +p{ \REMAINS{相対パスの扱い，プリプロセッサ} }
      +p{ \REMAINS{文脈のエントリーの拡張機能} }
    >
    +section{既存機能の破壊的な変更}<
      +p{ \REMAINS{フォント読み込みの機構} }
      +p{ \REMAINS{line-breakのインターフェイス変更} }
      +p{ \REMAINS{graphicとgraphic list} }
    >
  >
  +chapter?:(`specification`){言語仕様}<
    +p{
      この章は，対象をより細かい粒度で理解しようとせずにはいられない，物好きな読者向けに用意した．
      全貌を形式的に記述するには\SATySFi;は大きすぎるので，
      根幹となる部分だけを抜き出したサブセットをいくつか定義し，
      それについて操作的意味論や型システムをフォーマルに記述することを試みた．
    }
    +p{ \REMAINS{} }
  >
>
