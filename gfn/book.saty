% -*- coding: utf-8 -*-
@import: settings
@import: preface
@import: introduction
@import: getting-started
@import: alias-command-definition
@import: overall
@import: line-breaking
@import: graphics
@import: cross-reference
@import: future-work
@import: specification
@import: bib

document (|
  title = {The \SATySFi;book};
  author = {T. Suwa};
  preface = preface;
  bibliography = bibliography;
|) '<
  +chapter?:(`introduction`){\SATySFi;の開発動機}< #introduction; >
  +chapter?:(`getting-started`){\SATySFi;簡易入門}< #getting-started; >
  +chapter?:(`basic-command-definition`){コマンド定義：基礎編}<
    +p{
      \ref-chapter(`getting-started`);で\pkg{stdjareport}を用いて
      \SATySFi;の基礎的なコマンドの用法を知った．
      ところで，マークアップ言語の大きな強みのひとつは
      自前でコマンドを定義することによって
      種々の自動処理を実現したり独自の意味マークアップを規定したりできる点にあったはずである．
      実際，\codem{+chapter}とか\codem{+p}とか\codem{\\dfn}とかいった
      コマンドたちは単に\pkg{stdjareport}クラスによって定義が提供されているだけであり，
      その気になればユーザでも同様の定義を書いたりできるはずだ．
      そろそろ自前でコマンドを定義したくてうずうずしている読者も多いかと思う．
      この章では，コマンド定義のごく基礎的な方法を紹介する．
      あらかじめ言ってしまうとここでの説明はとてもアドホックなものになっており，
      \SATySFi;をよく理解されたのちにこの章を読めば
      「こんな子供騙しな説明をしていたのか」と驚かれるかもしれないが，
      読者の様々なバックグラウンドを鑑み，
      まず最初の一歩としておおまかに把握してもらうには良い説明だろうと
      判断してのことなのでご容赦願いたいと思う．
      より深い理解を獲得し，より柔軟で幅広い種類の処理をコマンドとして定義するには，
      \ref-chapter(`overall-structure`);で
      \SATySFi;が行なっている組版処理の全体像を把握した上で
      \ref-chapter(`advanced-command-definition`);に臨んでいただきたい．
    }
    +section{簡単なエイリアス}< #alias-command-definition; >
    +section{プログラミング言語としての\SATySFi;}<
      +p{
        既に述べたように，\SATySFi;はいわゆる函数型らしい特徴を兼ね備えた
        組版処理向けのマークアップ言語である．
        むしろ，より正確を期して言い表すならば
        値呼びの函数型言語の上に組版処理用の種々の言語機能が分厚く搭載された
        DSL（domain-specific language, 領域特化言語）だ．
        プログラミング言語としての\SATySFi;の基礎的部分には
        OCamlに大変よく似た体系が採用されており，
        基礎的部分の理解を得るのにOCamlに関する参考書で代用することも十分可能なほどである．
        とはいえ，OCamlなどの他言語から回り道せずとも\SATySFi;での最低限の直観を身につければ
        十分\SATySFi;でのプログラミングが可能であり，
        熱心に函数型プログラミングの基礎を習得したい読者ばかりではないであろうから，
        ここでも簡単にプログラミング言語としての\SATySFi;について解説する．
        また，OCamlと\SATySFi;との間には目的意識や美意識の違いに起因した多少の差異があるので，
        これについて（既にOCamlで流暢にプログラミングできる読者に対しても）簡単に補足する．
      }
      +subsection{式と値}<
        +p{
          \SATySFi;には対話環境が特に整備されていないので，
          プログラムの計算結果をPDFに出力して確かめることにしよう．
          ひとまず以下のようなコードを見てほしい：

          \d-code(```
            @require: stdjareport

            let-inline \show-int n =
              embed-string (arabic n)
            in

            document (|
              title = {Programming in \SATySFi;};
              author = {計 算太郎};
            |) '<
              +p{ Answer: \show-int(40 + 2); }
            >
          ```);%

          \codem{let-inline}から始まる，
          未知でありながら前節で見たインラインコマンドを定義する方法によく似た構文があるが，
          実際これは\codem{\\show-int}というインラインコマンドの定義である．
          この定義をどう読むのかは後々わかることになるので，
          今の段階では
          「与えられた整数を版面に文字として10進法で出力するコマンド\codem{\\show-int}」
          を定義するオマジナイだと思っていただきたい．
          注目されたいのは\codem{\\show-int}を使う部分，すなわち

          \d-code(```
            ​  +p{ Answer: \show-int(40 + 2); }
          ```);%

          である．丸括弧に囲まれた\codem{40 + 2}という怪しげな記述がある．
          とりあえず，この文書を\SATySFi;処理系にかけてみると，
          この段落に相当する部分は

          \d-block(open Sample in '<
            +p{ Answer: \show-int(40 + 2); }
          >);%

          と出力される．そう，${40} と ${2} の和が計算されているのである．
          平たく言えば，こういった “計算をする処理” がプログラムの仕事の根幹であり，
          “計算をする処理” をプログラムとして記述することをプログラミングと呼ぶ．
          \codem{40 + 2}のような記述は
          \dfnje{\index(`シキ`){式}}{expression}
          またはしばしば
          \dfnje{\index(`コウ`){項}}{term}と呼ばれ，
          式を適切な構文にしたがって組み立てることでプログラムが構築される\footnote{
            C言語やPythonなどの
            “手続き的な” 観点に強く基づいている計算機言語に馴染みのある読者は
            「式から文をつくり，文からプログラムを構築するのではないか？」
            と思われるかもしれないが，
            \SATySFi;に文の概念はない．
            というか，式の特殊な場合が “手続き的な” 言語に備わっている文に相当するのである．
            これはOCamlをはじめとする多くのいわゆる函数型言語に共通する性質である．
          }．
        }
        +p{
          \codem{40 + 2}の “計算が進んで” \codem{42}になったように，
          式は一般に “それ以上計算しない式” へと “うつりかわっていく”．
          この “うつりかわり” の過程を
          \dfnje{\index(`ヒョウカ`){評価}}{evaluation}
          またはしばしば
          \dfnje{\index(`カンヤク`){簡約}}{reduction}
          と呼び， “それ以上計算しない式” を
          \dfnje{\index(`コウブンテキアタイ`){構文的値}}{syntactic value}
          或いは単に
          \dfnje{\index(`アタイ`){値}}{value}
          と呼ぶ．
          プログラムの動作とは，式を評価して値を求めることなのである．
        }
        +p{
          \REMAINS{2項演算子の結合優先度}
        }
      >
      +section{変数とその束縛}<
        +p{
          \REMAINS{変数の概念とlet式}
        }
        +p{
          \REMAINS{変数名}
        }
      >
      +section{基本的なデータと型}<
        +p{
          \REMAINS{整数，文字列，浮動小数点数，長さ，真偽値}
        }
      >
      +section{函数と条件分岐}<
        +p{
          \REMAINS{函数定義と条件分岐}
        }
      >
      +section{代数的データ型}<
        +p{
          \REMAINS{代数的データ型}
        }
      >
      +section{再帰函数}<
        +p{
          \REMAINS{再帰函数}
        }
      >
    >
  >
  +chapter?:(`overall-structure`){文書が処理される仕組み}< #overall; >
%  +chapter?:(`type-system`){型システム}<
%    +p{
%      既に\ref-chapter(`introduction`);で述べたとおり，
%      \SATySFi;の最大の特徴は型検査器を備えているおかげで
%      或る種の入力の誤りを実際に組版処理を始めるよりも前に検出してすばやく報告できることにある．
%      本章では，この型検査器を実現している型システムについて見ていくことにしよう．
%    }
%    +p{ \REMAINS{} }
%  >
  +chapter?:(`advanced-command-definition`){コマンド定義：発展編}<
    +p{
      \ref-chapter(`basic-command-definition`);
      で基礎的なコマンド定義の方法およびプログラミング言語としての\SATySFi;について習得し，
      \ref-chapter(`overall-structure`);で\SATySFi;の処理系の全体像，
      および各工程がどのように定式化されているかについて概観した．
      これらの前提知識を把握した下で，この章ではようやくフォントや文字色，行送りといった，
      “組版上の装飾的な視覚情報” にも関わる処理を行なうコマンドの実装方法を習得する．
    }
    +section?:(`text-processing-context`){テキスト処理文脈}<
      +p{
        \ref-chapter(`overall-structure`);でも既に述べたが，
        組版処理はインラインテキスト・ブロックテキストといった
        “テキストの情報” だけが与えられてもできない．
        すなわち，どのフォントのどんなサイズで組むか\footnote{
          活版印刷の慣習としては，“font” という語は
          各字形が同一のデザインに則っているだけでなく
          サイズも相等しいひと揃いの活字のセットを指したようだが，
          \SATySFi;でフォントと言う場合は
          （字形やそれに関するメトリックのひとかたまりに紐づけられた）フォント名，
          拡大縮小比率，ベースライン調整率
          の3つ組を指す．詳しくは\ref-chapter(`typography`);で述べる．
        }，段落の幅や行送りはどの程度の長さにするか，
        といった情報が “テキストの情報” に加えて必要である．
        これらの
        “テキストには表れていないが組版処理上必要な情報”
        を，\SATySFi;は
        \dfnje{\index(`テキスト処理文脈`){テキスト処理文脈}}{text-processing context}
        という機構に保持させて扱う．
        抽象的な説明を続けてもおそらく要領を得ないであろうから，
        具体例を用いて説明しよう．
        例えば，文字サイズを1.5倍に変更するコマンド\codem{\\enlarge}を考える：

        \d-code-and-block(```
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        ```)(open Sample in '<
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        >);%

        このような\codem{\\enlarge}は次のように定義できる：

        \d-code(```
          let-inline ctx \enlarge it =
            let size = get-font-size ctx in
            let ctx-enlarge = set-font-size (size *' 1.5) ctx in
              read-inline ctx-enlarge it
        ```);%

        唐突に全部見せられてもあまり実感が湧かないであろうから少しずつ説明するが，
        まず1行目から見慣れない文法である．
        \codem{let-inline}を用いてインラインコマンドを定義する構文は
        \ref-chapter(`basic-command-definition`);で既に紹介したが，
        ここでは\codem{let-inline}と定義されるコマンド名\codem{\\enlarge}との間に
        \codem{ctx}なる何かがある．
        実はこれこそがテキスト処理文脈を受け取る “第0引数” の変数だ．
        コマンドの適用が評価されるとき，
        ユーザが与えた通常の引数に加えて，コマンドが使われている箇所のすぐ外側の
        テキスト処理文脈がこの変数\codem{ctx}に渡され，
        コマンドの実装中で使える，というわけである．
        ここまで\pkg{stdjareport}など
        何らかのクラスファイルが提供するマークアップ等の方式に従って
        \SATySFi;を使うにあたってはテキスト処理文脈を全く意識する必要がなかったであろうけれども，
        実のところユーザからは見えない裏側で
        密かに各コマンドがテキスト処理文脈を受け渡ししていたのである．
        なお，\codem{ctx}は単に変数名なので，第0引数に\codem{x}とか\codem{y}とか
        \codem{i-love-satysfi}といった違う名前を使っても構わない\footnote{
          ただし，既存のパッケージでは慣習的に第0引数を必ず\codem{ctx}という変数名にしているので，
          複数人で開発したり，既存パッケージを改造したりする場合は
          \codem{ctx}という変数名で統一した方が理解に齟齬を生じにくいかもしれない．
        }．
      }
      +p{
        さて，続いてコマンド定義の “中身” を見てみる．
        第0引数の\codem{ctx}と（各適用でユーザが与える）第1引数\codem{it}を使うのだが，
        まず\codem{size}に
        外から渡されてきたテキスト処理文脈\codem{ctx}が保持している
        フォントサイズを取り出して束縛する．これはプリミティヴ：

        \val?:(`get-font-size`)({get-font-size})%
          (Type.(context --> length));%

        を用いて行なう．取得したフォントサイズ\codem{size}は\type(Type.(length));型であり，

        \val?:(`*'`)({(\*')})(Type.(length --> (float --> length)));%

        を用いて\codem{size \*' 1.5}で${1.5}倍の長さを得る．
        フォントサイズの設定は

        \val?:(`set-font-size`)({set-font-size})%
          (Type.(length --> (context --> context)));%

        を用いて行なう．
        すなわち，古いテキスト処理文脈\codem{ctx}と設定するフォントサイズ\codem{size}に対して
        \codem{set-font-size size ctx}で
        フォントサイズの更新された新しいテキスト処理文脈が返ってくる．
        \codem{\\enlarge}の実装では，この新しいテキスト処理文脈を
        変数\codem{ctx-enlarge}に束縛している．
        なお，ここの一連の処理で
        \codem{ctx}の内容が “書き換えられる” わけではないことに注意されたい．
        単に\codem{ctx}の内容のうちフォントサイズに関するデータだけが
        \codem{size}に変更された新しいテキスト処理文脈がつくられて
        \codem{ctx-enlarge}という変数に束縛されているだけである．
        実際，\codem{ctx-enlarge}が束縛されたスコープでも
        依然として\codem{ctx}を使うことができ，
        かつそのテキスト処理文脈には元々のフォントサイズが保持されている．
      }
      +p{
        最も重要なのは最終行だ．ここで使われているプリミティヴ

        \val?:(`read-inline`)({read-inline})%
          (Type.(context --> (inline-text --> inline-boxes)));%

        は\ref-chapter(`overall-structure`);で説明した
        インライン変換器に相当し，\ref-figure(`conversion-to-inline-boxes`);
        に示されたような処理をしている．すなわち，
        \codem{read-inline \meta{ctx} \meta{it}}で
        テキスト処理文脈\codem{\meta{ctx}}の保持するフォントや
        文字サイズなどの情報をもとにインラインテキスト\codem{\meta{it}}を
        インラインボックス列へと変換する．
        そしてこれがきわめて重要な事項なのだが，
        インラインテキスト\codem{\meta{it}}に含まれている
        インラインコマンドの適用が評価されるのも，
        この\codem{read-inline}によるインラインボックス列への変換の最中である．
        このとき，\codem{read-inline}に第1引数として渡したテキスト処理文脈が，
        第2引数の\codem{\meta{it}}中の各コマンド適用を評価するときに
        第0引数として渡されるのである．
      }
    >
    +p{
      \REMAINS{コマンドが処理されるアニメーション}
    }
    +p{
      \REMAINS{let-inlineによるエイリアス定義は糖衣構文}
    }
    +p{
      \REMAINS{発展的なコマンド定義：line-break}
    }
  >
  +chapter?:(`line-breaking`){行分割処理}< #line-breaking; >
  +chapter?:(`system`){システムと設定ファイル}<
    +p{
      この章では\SATySFi;がどのようにフォントやパッケージや設定ファイルを
      読み込んで使用するかといったシステムに関する説明を提供する．
      \SATySFi;が使用するフォントファイル，標準パッケージ，設定ファイルなどの一式は，
      次のような構造をもつ\dfnje{ライブラリルート}{library root}と呼ばれるディレクトリの
      下に収められている：
    }
    +centered-graphics(15cm)(11cm)(fun r -> (
      (stroke 0.5pt Color.black (Gr.rectangle (0cm, 0cm) (15cm, 11cm))) ::
      draw-directory-tree r (1cm, 10.5cm) 0.75cm 0.5cm
        (Directory({\path{\meta{LIBROOT/}}}, [
          Directory({\path{dist/}}, [
            Directory({\path{fonts/}}, [
              File{\ ${\vdots}};
            ]);
            Directory({\path{hash/}}, [
              File{\path{default-font.satysfi-hash}};
              File{\path{fonts.satysfi-hash}};
              File{\path{mathfonts.satysfi-hash}};
            ]);
            Directory({\path{hyph/}}, [
              File{\path{english.satysfi-hyph}};
              File{\ ${\vdots}};
            ]);
            Directory({\path{packages/}}, [
              File{\path{gr.satyh}};
              File{\path{list.satyg}};
              File{\path{stdjareport.satyh}};
              File{\ ${\vdots}};
            ]);
            Directory({\path{unidata/}}, [
              File{\path{EastAsianWidth.txt}};
              File{\path{LineBreak.txt}};
              File{\path{Scripts.txt}};
              File{\ ${\vdots}};
            ]);
          ]);
        ]))
    ));
    +p{
      \meta{LIBROOT/}は，UNIX系OSでは

      \listing{
        * \path{~/.satysfi/}
        * \path{/usr/local/share/satysfi/}
        * \path{/usr/share/satysfi/}
      }%

      のいずれかであり，\SATySFi;は設定ファイル\path{\meta{foo}}が必要となった際に
      \no-break{\path{~/.satysfi/\meta{foo}}}，
      \no-break{\path{/usr/local/share/satysfi/\meta{foo}}}，
      \no-break{\path{/usr/share/satysfi/\meta{foo}}}
      \ をこの優先度で探し，最初に存在したものを用いる．
      すなわち，\path{\meta{LIBROOT/}}はファイル\path{\meta{foo}}ごとに決定される．
      上記パスの2箇所以上にファイルを置く場合は，この点に注意する必要がある．
      Windowsの場合は\path{\meta{LIBROOT/}}として

      \listing{
        * \path{\%userprofile\%\\.satysfi\\}
        * \path{\%SATYSFI_RUNTIME\%\\}
      }%

      がこの優先度で使われる \cite[`satysfi-cross-windows`];．
      以降，設定ファイル類は\path{\meta{LIBROOT/}}からの相対パスで書くこととする．
    }
    +section{各ディレクトリの役割}<
      +p{
        まず，\path{\meta{LIBROOT/}}の直下には\path{dist/}がある．
        これは内容物が将来的にパッケージマネージャやディストリビューションによって操作される
        （すなわち，ユーザが手で内容物を変更するべきでない）ことを意識して
        “distribution” から命名されている．
        現在はこのディレクトリ以下の内容をユーザが操作することは非推奨ではなく，
        また（カレントディレクトリが\path{\meta{LIBROOT/}}以下の状態でSATySFiを起動しない限り）
        \SATySFi;が内容を変更することはない．
        将来的には\path{dist/}の他に\path{local/}を設け，
        これにユーザが自身が作成したパッケージ類を格納できるようにすることを想定している．
      }
      +p{
        \path{dist/hash/}と\path{dist/unidata/}は設定ファイルの格納場所であり，
        どのような名前のファイルが直下に置かれている必要があるかも決められている．
        他のディレクトリは直下にデータを格納する．
      }
      +p{
        \path{dist/hash/}には\SATySFi;コードからデータにアクセスするための
        いくつかの設定ファイルが格納されており，それぞれ\dfn{YOJSON形式}
        （\dfn{yojson}パッケージにより拡張されたJSON形式をこう呼ぶことにする）
        で記述されている．
      }
      +p{
        \path{dist/unidata/}はUnicodeコードポイントを
        組版処理中にどのように扱うかを規定したファイルを格納しており，
        これはUnicode Databaseとして公開されているテキストファイル群の一部である．
      }
      +p{
        \path{dist/fonts/}は\SATySFi;で使用するOpenTypeフォントファイルを直下に格納する．
      }
      +p{
        \path{dist/hyph/}はハイフネーション辞書を直下に格納する．
        現状では英語のハイフネーションのみに対応しており，
        \path{dist/hyph/english.satysfi-hyph}というデータのみを利用するが，
        将来的に多言語へと拡張し，\path{dist/hash/}以下でハイフネーション辞書の設定を扱う想定である．
      }
      +p{
        \path{dist/packages/}はパッケージ類を格納する．
        パッケージファイルを\path{dist/packages/\meta{path/to/foo}\meta-or{|.satyh|.satyg|}}
        というパスに置くと，パッケージとして\codem{\@require: \meta{path/to/foo}}で読み込めるようになる．
        拡張子が\path{.satyh}のものと\path{.satyg}のものが両方存在する場合は
        \path{.satyh}が優先される\footnote{
          拡張子\path{.satyg}は，
          テキストモードとPDFモードとで
          共通に使えるパッケージファイルにつけることを想定している．
          これは将来的な拡張の都合であり，現在はどちらでも特に違いはない．
        }．
      }
    >
    +section{フォント設定}<
      +p{
        \SATySFi;で使用できるフォントは
        \dfnje{フォントハッシュファイル}{font hash file}\path{dist/hash/fonts.satysfi-hash}
        に設定の記載のあるフォントである．
        ユーザが新しいフォントを\SATySFi;で使えるように設定したい場合は，
        \path{dist/fonts/}直下に所望のフォントファイル\path{\meta{bar}.otf}を置き，
        フォントハッシュファイル内のYOJSONのディクショナリに

        \d-codem{
            "\meta{bar}": \<Single \{"src-dist": "\meta{bar}.otf"\}\>
        }%

        というエントリを追記する．
        この設定を加えることでフォント名\codem{\`bar\`}が\SATySFi;で使えるようになる．
        フォントの（拡張子を除いた）ファイル名とフォント名は一致していなくても構わない．
        所望のフォントがTrueType Collectionのフォントファイル
        \path{\meta{baz}.ttc}の ${n} 番目の要素\footnote{番号は ${1}-originである．}である場合は

        \d-codem{
          "\meta{baz}": \<Collection \{"src-dist": "\meta{baz}.ttc", "index": \meta{n}\}\>
        }%

        と記述することでやはり\codem{\`baz\`}という名前でそのフォントが使えるようになる．
        数式フォントについても\dfnje{数式フォントハッシュファイル}{math font hash file}
        \path{dist/hash/mathfonts.satysfi-hash}に設定を記載する．
        記述する形式はフォントハッシュファイルと同様である．
      }
    >
    +section{デフォルトのフォント設定}<
      +p{
        組版処理中で，特にフォント指定がない場合に使われるフォント\footnote{
          \codem{get-initial-context}が返すテキスト処理文脈に格納されているフォント設定の意．
        }は\dfnje{デフォルトフォントハッシュファイル}{default font hash file}
        \path{dist/hash/default-font.satysfi-hash}で設定されているものになる．
        デフォルトフォントハッシュファイルの内容は文字体系ごとに初期値とするフォントを指定したディクショナリであり，
        現状では文字体系として漢字，かな，ラテン文字，その他，の4つが定められている．
        勿論今後より多くの文字体系をサポートする想定だが，
        今のところは手前3つにあてはまらないUnicodeコードポイントはその他扱いになる．
        デフォルトフォントハッシュファイルは，例えば以下のようにして記述する：

        \d-code(```
            {
              "han-ideographic": {
                "font-name": "ipaexm",
                "ratio"    : 0.88,
                "rising"   : 0.0
              },
              "kana": {
                "font-name": "ipaexm",
                "ratio"    : 0.88,
                "rising"   : 0.0
              },
              "latin": {
                "font-name": "Arno",
                "ratio"    : 1.0,
                "rising"   : 0.0
              },
              "other-script": {
                "font-name": "Arno",
                "ratio"    : 1.0,
                "rising"   : 0.0
              }
            }
        ```);%

        \code(`ratio`);エントリは拡大率，
        \code(`rising`);エントリは行方向に垂直な位置調整の指定である．
        詳しくは\ref-chapter(`typography`);で扱うが，
        \SATySFi;ではフォントを規定するのにOpenTypeフォントファイルだけでなく
        拡大率とベースライン調整率という2つの値を用いる．
        上の設定では漢字と仮名を（ラテン文字との混植を想定して）
        ${0.88} 倍の大きさに調整している例である．
      }
      +p{
        なお，現状ではデフォルトの数式フォントは\codem{\`lmodern\`}で固定されてしまっている．
        勿論，近い将来に変更可能なように拡張する想定である．
      }
    >
  >
  +chapter?:(`typography`){文字組版}<
    +p{
      文字は組版処理の主役であり，そして最も人間くささゆえの複雑性を備えた組版処理対象だ．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`graphics`){グラフィックス}< #graphics; >
  +chapter?:(`math`){数式組版}<
    +p{
      主に理工系の文書をしたためる者にとって，
      数式組版機能は水や空気のように当然のものとして組版処理システムに備わっていてほしいものだ．
      \TeX;/\LaTeX;が30年の長きに亘って使われ続けてきた大きな要因のひとつが，
      誰もが納得するような品質の数式組版機能を古くから提供している
      数少ない組版処理システムだったからであることにおそらく異論はないだろう．
    }
    +p{
      \SATySFi;も，\TeX;/\LaTeX;に肩を並べられるくらいの品質の数式組版機能を提供している．
      しかも，既に\ref-chapter(`getting-started`);で見たように，
      \LaTeX;そっくりの構文で書くことができる．
      数式を多大に含む文書を執筆したいという動機で既に盛んに\LaTeX;に触れていた人にとって，
      少なくとも数式の記法が\SATySFi;への移行に関する心理的障壁となることはまずないだろう．
      本章では，\SATySFi;に備わっている数式組版機能について，詳細を追って見ていくことにしよう．
    }
    +p{
      なお，繰り返しになるが，\SATySFi;での数式の記述はコードの見た目上\LaTeX;にそっくりなものの，
      裏でやっていることは両者で全然違う．
      \LaTeX;は字句解析（トークン化）に相当する処理を組版処理と同時進行で行ない，
      かつ構文木も一切構築せずパターンマッチでトークン列を書き換えていくのに対し，
      \SATySFi;は静的に構文解析して数式を構文木の形で保持している．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`cross-reference`){相互参照}< #cross-reference; >
  +chapter?:(`page-breaking`){ページ分割処理}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`future-work`){Future Work}< #future-work; >
  +chapter?:(`specification`){言語仕様}< #specification; >
>
