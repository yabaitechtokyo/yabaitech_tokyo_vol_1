% -*- coding: utf-8 -*-
@import: settings
@import: preface
@import: introduction
@import: getting-started
@import: alias-command-definition
@import: overall
@import: bib

document (|
  title = {The \SATySFi;book};
  author = {T. Suwa};
  preface = preface;
  bibliography = bibliography;
|) '<
  +chapter?:(`introduction`){ゲームを始める前に}< #introduction; >
  +chapter?:(`getting-started`){\SATySFi;簡易入門}< #getting-started; >
  +chapter?:(`basic-command-definition`){コマンド定義：基礎編}<
    +p{
      \ref-chapter(`getting-started`);で\pkg{stdjareport}を用いて
      \SATySFi;の基礎的なコマンドの用法を知った．
      ところで，マークアップ言語の大きな強みのひとつは
      自前でコマンドを定義することによって
      種々の自動処理を実現したり独自の意味マークアップを規定したりできる点にあったはずである．
      実際，\codem{+chapter}とか\codem{+p}とか\codem{\\dfn}とかいった
      コマンドたちは単に\pkg{stdjareport}クラスによって定義が提供されているだけであり，
      その気になればユーザでも同様の定義を書いたりできるはずだ．
      そろそろ自前でコマンドを定義したくてうずうずしている読者も多いかと思う．
      この章では，コマンド定義のごく基礎的な方法を紹介する．
      あらかじめ言ってしまうとここでの説明はとてもアドホックなものになっており，
      \SATySFi;をよく理解されたのちにこの章を読めば
      「こんな子供騙しな説明をしていたのか」と驚かれるかもしれないが，
      読者の様々なバックグラウンドを鑑み，
      まず最初の一歩としておおまかに把握してもらうには良い説明だろうと
      判断してのことなのでご容赦願いたいと思う．
      より深い理解を獲得し，より柔軟で幅広い種類の処理をコマンドとして定義するには，
      \ref-chapter(`overall-structure`);で
      \SATySFi;が行なっている組版処理の全体像を把握した上で
      \ref-chapter(`advanced-command-definition`);に臨んでいただきたい．
    }
    +section{簡単なエイリアス}< #alias-command-definition; >
    +section{プログラミング言語としての\SATySFi;}<
      +p{
        既に述べたように，\SATySFi;はいわゆる函数型らしい特徴を兼ね備えた
        組版処理向けのマークアップ言語である．
        むしろ，より正確を期して言い表すならば
        函数型言語の上に組版処理用の種々の言語機能が分厚く搭載された
        DSL（domain-specific language, 領域特化言語）だ．
        プログラミング言語としての\SATySFi;の基礎的部分には
        OCamlに大変よく似た体系が採用されており，
        基礎的部分の理解を得るのにOCamlに関する参考書で代用することも十分可能なほどである．
        とはいえ，OCamlなどの他言語から回り道せずとも\SATySFi;での最低限の直観を身につければ
        十分\SATySFi;でのプログラミングが可能であり，
        熱心に函数型プログラミングの基礎を習得したい読者ばかりではないであろうから，
        ここでも簡単にプログラミング言語としての\SATySFi;について解説する．
        また，OCamlと\SATySFi;との間には目的意識や美意識の違いに起因した多少の差異があるので，
        これについて（既にOCamlで流暢にプログラミングできる読者に対しても）簡単に補足する．
      }
      +p{
        \REMAINS{プログラミングの解説}
      }
    >
  >
  +chapter?:(`overall-structure`){文書が処理される仕組み}< #overall; >
  +chapter?:(`type-system`){型システム}<
    +p{
      既に\ref-chapter(`introduction`);で述べたとおり，
      \SATySFi;の最大の特徴は型検査器を備えているおかげで
      或る種の入力の誤りを実際に組版処理を始めるよりも前に検出してすばやく報告できることにある．
      本章では，この型検査器を実現している型システムについて見ていくことにしよう．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`advanced-command-definition`){コマンド定義：発展編}<
    +p{
      \ref-chapter(`basic-command-definition`);
      で基礎的なコマンド定義の方法およびプログラミング言語としての\SATySFi;について習得し，
      \ref-chapter(`overall-structure`);で\SATySFi;の処理系の全体像，
      および各工程がどのように定式化されているかについて概観した．
      これらの前提知識を把握した下で，この章ではようやくフォントや文字色，行送りといった，
      “組版上の装飾的な視覚情報” にも関わる処理を行なうコマンドの実装方法を習得する．
    }
    +section?:(`text-processing-context`){テキスト処理文脈}<
      +p{
        \ref-chapter(`overall-structure`);でも既に述べたが，
        組版処理はインラインテキスト・ブロックテキストといった
        “テキストの情報” だけが与えられてもできない．
        すなわち，どのフォントのどんなサイズで組むか\footnote{
          活版印刷の慣習としては，“font” という語は
          各字形が同一のデザインに則っているだけでなく
          サイズも相等しいひと揃いの活字のセットを指したようだが，
          \SATySFi;でフォントと言う場合は
          （字形やそれに関するメトリックのひとかたまりに紐づけられた）フォント名，
          拡大縮小比率，ベースライン調整率
          の3つ組を指す．詳しくは\ref-chapter(`typography`);で述べる．
        }，段落の幅や行送りはどの程度の長さにするか，
        といった情報が “テキストの情報” に加えて必要である．
        これらの
        “テキストには表れていないが組版処理上必要な情報”
        を，\SATySFi;は\dfnje{テキスト処理文脈}{text-processing context}
        という機構に保持させて扱う．
        抽象的な説明を続けてもおそらく要領を得ないであろうから，
        具体例を用いて説明しよう．
        例えば，文字サイズを1.5倍に変更するコマンド\codem{\\enlarge}を考える：

        \d-code-and-block(```
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        ```)(open Sample in '<
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        >);%

        このような\codem{\\enlarge}は次のように定義できる：

        \d-code(```
          let-inline ctx \enlarge it =
            let size = get-font-size ctx in
            let ctx-enlarge = set-font-size (size *' 1.5) ctx in
              read-inline ctx-enlarge it
        ```);%

        唐突に全部見せられてもあまり実感が湧かないであろうから少しずつ説明するが，
        まず1行目から見慣れない文法である．
        \codem{let-inline}を用いてインラインコマンドを定義する構文は
        \ref-chapter(`basic-command-definition`);で既に紹介したが，
        ここでは\codem{let-inline}と定義されるコマンド名\codem{\\enlarge}との間に
        \codem{ctx}なる何かがある．
        実はこれこそがテキスト処理文脈を受け取る “第0引数” の変数だ．
        コマンドの適用が評価されるとき，
        ユーザが与えた通常の引数に加えて，コマンドが使われている箇所のすぐ外側の
        テキスト処理文脈がこの変数\codem{ctx}に渡され，
        コマンドの実装中で使える，というわけである．
        ここまで\pkg{stdjareport}など
        何らかのクラスファイルが提供するマークアップ等の方式に従って
        \SATySFi;を使うにあたってはテキスト処理文脈を全く意識する必要がなかったであろうけれども，
        実のところユーザからは見えない裏側で
        密かに各コマンドがテキスト処理文脈を受け渡ししていたのである．
        なお，\codem{ctx}は単に変数名なので，第0引数に\codem{x}とか\codem{y}とか
        \codem{i-love-satysfi}といった違う名前を使っても構わない\footnote{
          ただし，既存のパッケージでは慣習的に第0引数を必ず\codem{ctx}という変数名にしているので，
          複数人で開発したり，既存パッケージを改造したりする場合は
          \codem{ctx}という変数名で統一した方が理解に齟齬を生じにくいかもしれない．
        }．
      }
      +p{
        さて，続いてコマンド定義の “中身” を見てみる．
        第0引数の\codem{ctx}と（各適用でユーザが与える）第1引数\codem{it}を使うのだが，
        まず\codem{size}に
        外から渡されてきたテキスト処理文脈\codem{ctx}が保持している
        フォントサイズを取り出して束縛する．これはプリミティヴ：

        \val({get-font-size})(Type.(context --> length));%

        を用いて行なう．取得したフォントサイズ\codem{size}は\type(Type.(length));型であり，

        \val({(\*')})(Type.(length --> (float --> length)));%

        を用いて\codem{size \*' 1.5}で${1.5}倍の長さを得る．
        フォントサイズの設定は

        \val({set-font-size})(Type.(length --> (context --> context)));%

        を用いて行なう．
        すなわち，古いテキスト処理文脈\codem{ctx}と設定するフォントサイズ\codem{size}に対して
        \codem{set-font-size size ctx}で
        フォントサイズの更新された新しいテキスト処理文脈が返ってくる．
        \codem{\\enlarge}の実装では，この新しいテキスト処理文脈を
        変数\codem{ctx-enlarge}に束縛している．
        なお，ここの一連の処理で
        \codem{ctx}の内容が “書き換えられる” わけではないことに注意されたい．
        単に\codem{ctx}の内容のうちフォントサイズに関するデータだけが
        \codem{size}に変更された新しいテキスト処理文脈がつくられて
        \codem{ctx-enlarge}という変数に束縛されているだけである．
        実際，\codem{ctx-enlarge}が束縛されたスコープでも
        依然として\codem{ctx}を使うことができ，
        かつそのテキスト処理文脈には元々のフォントサイズが保持されている．
      }
      +p{
        最も重要なのは最終行だ．ここで使われているプリミティヴ

        \val({read-inline})(Type.(context --> (inline-text --> inline-boxes)));%

        は\ref-chapter(`overall-structure`);で説明した
        インライン変換器に相当し，\ref-figure(`conversion-to-inline-boxes`);
        に示されたような処理をしている．すなわち，
        \codem{read-inline \meta{ctx} \meta{it}}で
        テキスト処理文脈\codem{\meta{ctx}}の保持するフォントや
        文字サイズなどの情報をもとにインラインテキスト\codem{\meta{it}}を
        インラインボックス列へと変換する．
        そしてこれがきわめて重要な事項なのだが，
        インラインテキスト\codem{\meta{it}}に含まれている
        インラインコマンドの適用が評価されるのも，
        この\codem{read-inline}によるインラインボックス列への変換の最中である．
        このとき，\codem{read-inline}に第1引数として渡したテキスト処理文脈が，
        第2引数の\codem{\meta{it}}中の各コマンド適用を評価するときに
        第0引数として渡されるのである．
      }
    >
    +p{
      \REMAINS{発展的なコマンド定義}
    }
  >
  +chapter?:(`line-breaking`){行分割処理}<
    +section{行分割処理の概要}<
      +p{
        行分割処理に於いて，見た目が十分整うように行を段落に切り分けるのはそれほど自明ではない．
        まずは行を切り分けて良い箇所の決定である．
        例えばラテン文字やキリル文字といった “欧文” は基本的に

        \listing{
          * 単語間の空白
          * ハイフネーション上許容される単語の途中の箇所
        }%

        のいずれかでしか行を分けてはいけないという制約があるし，
        和文でも

        \listing{
          * 開き括弧の直後
          * 小書きの「っ」や音引き「ー」の直前
        }%

        など，行を分けてはいけない箇所の “規定” がいくらかある．
        このほか，例えば読点の直後で行を分けた場合は行の途中の読点とは違って
        読点の後ろに2分アキを入れない，
        つまりいわゆる “全角幅” の半分の空白を設けないなどといった，
        行末が揃っているように見せるための “規則” もある．
        こういった，行を切り分けてよい箇所・いけない箇所の区別と切り分けた場合の特別な処理を
        \SATySFi;で実装するにあたっては，
        まず多言語対応の組版を意図して
        \dfn{Unicode Line Breaking Algorithm} \cite[`unicode-lb`]; に
        原則従うことにし，
        特にひとまず和文・欧文の混植を優先して実現することを目的としていたので
        この和文の組版規則については『\dfn{日本語組版処理の要件}』\cite[`jlreq`];，
        通称\dfn{JLreq}にできるだけ従って実装した．
        ハイフネーションについては，やはり偉大な先駆者である\TeX;処理系に倣って
        \dfn{Liang–Knuthアルゴリズム} \cite[`liang-knuth`]; をもとに実装した．
      }
      +p{
        また実際に切り分ける箇所を決定する処理も自明ではない．
        前から順に詰められるだけ詰めて切り分けるという単純な貪欲アルゴリズムでは
        後ろの行が前に比べて過度に間延びして美しく見えないような出力もできてしまうから，
        “段落全体を見渡してから行分割箇所を決める” ような処理を効率的に行なう必要があるのである．
        この行分割に関しては，\dfn{Knuth–Plassアルゴリズム} \cite[`knuth-plass`]; と呼ばれる，
        \TeX;で採用されたものとおおよそ同様の処理を独自に拡張して用いることにした．
        このアルゴリズムでは，端的に言えば
        \dfn{最短経路問題}に帰着することで適切な行分割箇所を選んでいる．
        独自に拡張したのは，\inline-frame{\inline-frame{入れ子になった枠}のついた部分でも
        途中で行分割できるようにしたこと}に関してである．
      }
    >
    +section{行分割に関するプリミティヴ}<
      +p{
        \ref-chapter(`advanced-command-definition`);に於いて，
        行分割処理そのものを担うプリミティヴが

        \val({line-break})(Type.(bool --> (bool -->
          (context --> (inline-boxes --> block-boxes)))));%

        であることは既に紹介したが，分割される箇所の候補がどのように決定され，
        その処理にユーザやパッケージ開発者がどのように介入できるかについてはまだ触れていなかった．
        これについて以下で少し解説する．
      }
      +p{
        \SATySFi;では，行分割の候補となる箇所がインラインボックス列の中に含まれており，
        そのいずれも

        \listing{
          * そこで行分割されなかった場合の内容 ${b_0}
          * そこで行分割された場合に直前の行末に入る内容 ${b_1}
          * そこで行分割された場合に直後の行頭に入る内容 ${b_2}
          * そこで行分割された場合に加算される\dfnje{ペナルティ値}{penalty} ${p}
        }%

        からなる4つの情報 ${\tuple{|b_0|b_1|b_2|p|}} をもつ．
        逆に，これらの情報をもたない箇所では行分割しない\footnote{
          厳密に言うと例外がある．
          ブロックボックス列を “段落の一部として埋め込む” 機能を担う
          \codem{embed-block-breakable}というプリミティヴによって
          生成されたインラインボックス列は，その直前で必ず行分割される．
        }．
        この4つ組を備えた箇所を以降
        単に\dfnje{行分割候補箇所}{line break opportunity}
        と呼ぶことにしよう．
        行分割候補箇所は，
        インラインテキストからインラインボックス列に変換する過程で現れる．
        ペナルティ値 ${p} は基本的にテキスト処理文脈から決定される．
        この際に，例えば空白文字は
        ${b_0} が（単語間の空白として適切な程度に）多少伸縮する空白，
        ${b_1} と ${b_2} が空っぽであるような行分割候補箇所に変換される．
        “table” という文字列は，
        ${b_0} が
        \as-latin-word{\BoxGraphics.roman{|t|a|b|l|e|}}，
        ${b_1} が
        \as-latin-word{\BoxGraphics.roman{|t|a|-|}}，
        ${b_2} が
        \as-latin-word{\BoxGraphics.roman{|b|l|e|}}
        であるような行分割候補箇所へと変換される．
        すなわち，途中で行分割する必要がなければ単に行中で
        \as-latin-word{\BoxGraphics.roman{|t|a|b|l|e|}}と組まれるように，
        途中でハイフネーションを行なって分割する方が周辺の要素の並びから望ましいと判断される場合は
        その行末が\as-latin-word{\BoxGraphics.roman{|t|a|-|}}で
        次の行頭が\as-latin-word{\BoxGraphics.roman{|b|l|e|}}になるように，
        それぞれ指定した行分割候補箇所になるのである\footnote{
          実際のハイフネーション処理はもう少しだけ複雑である．
          単語中でハイフネーションが可能な箇所は2箇所以上あったりするからだ．
        }．
        インラインテキストがどのようにインラインボックス列に変換され，
        どのように行分割候補箇所が現れるかは，
        前述のとおり基本的には
        Unicode Line Breaking Algorithm \cite[`unicode-lb`];
        と『日本語組版処理の要件』\cite[`jlreq`];に基づいているが，
        多言語組版を想定して将来的には
        ユーザやパッケージ開発者が介入して変更できるようにしたいと考えている．
      }
      +p{
        行分割候補箇所はインラインテキストからインラインボックス列への変換過程で生成されるだけでなく，
        “手動で” 挿入することもできる．これに用いるのがプリミティヴ：

        \val({discretionary})(Type.(int -->
          (inline-boxes --> (inline-boxes --> (inline-boxes --> inline-boxes)))));%

        である．使い方は至極単純で，
        \codem{discretionary \meta{p}
          \metasub(${0}){ib} \metasub(${1}){ib} \metasub(${2}){ib}}
        でペナルティ値 ${p} が\codem{\meta{p}}，
        各 ${b_i} がそれぞれ\codem{\metasub(${i}){ib}}であるような
        行分割候補箇所が生成される．
      }
      +p{ \dfnje{グルー}{glue}と呼ばれる．\REMAINS{inline-glue} }
      +p{ \REMAINS{inline-fil} }
    >
  >
  +chapter?:(`typography`){文字組版}<
    +p{
      文字は組版処理の主役であり，そして最も人間くささゆえの複雑性を備えた組版処理対象だ．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`graphics`){グラフィックス}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`math`){数式組版}<
    +p{
      主に理工系の文書をしたためる者にとって，
      数式組版機能は水や空気のように当然のものとして組版処理システムに備わっていてほしいものだ．
      \TeX;/\LaTeX;が30年の長きに亘って使われ続けてきた大きな要因のひとつが，
      誰もが納得するような品質の数式組版機能を古くから提供している
      数少ない組版処理システムだったからであることにおそらく異論はないだろう．
    }
    +p{
      \SATySFi;も，\TeX;/\LaTeX;に肩を並べられるくらいの品質の数式組版機能を提供している．
      しかも，既に\ref-chapter(`getting-started`);で見たように，
      \LaTeX;そっくりの構文で書くことができる．
      数式を多大に含む文書を執筆したいという動機で既に盛んに\LaTeX;に触れていた人にとって，
      少なくとも数式の記法が\SATySFi;への移行に関する心理的障壁となることはまずないだろう．
      本章では，\SATySFi;に備わっている数式組版機能について，詳細を追って見ていくことにしよう．
    }
    +p{
      なお，繰り返しになるが，\SATySFi;での数式の記述はコードの見た目上\LaTeX;にそっくりなものの，
      裏でやっていることは両者で全然違う．
      \LaTeX;は字句解析（トークン化）に相当する処理を組版処理と同時進行で行ない，
      かつ構文木も一切構築せずパターンマッチでトークン列を書き換えていくのに対し，
      \SATySFi;は静的に構文解析して数式を構文木の形で保持している．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`cross-reference`){相互参照}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`page-breaking`){ページ分割処理}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`text-mode`){テキストモード}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`primitives`){プリミティヴ一覧}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`future-work`){Future Work}<
    +p{
      \SATySFi;は現時点でも充分実用に耐える程度に機能を備えているが，
      今後さらに拡張していきたいと考えている点がいくつもある．
      本章ではこれについて簡潔に述べることとしよう．
      端的に言ってしまえば開発に協力してくださるかもしれない方への喧伝である．
    }
    +section{機能の拡張}<
      +subsection{文字組版機能の拡張}<
        +p{ \REMAINS{縦書き，LTR/RTL，2段組み} }
        +p{ \REMAINS{OpenTypeフィーチャのON/OFF機能} }
        +p{ \REMAINS{合字やカーニング処理の言語ごとの切り替え} }
        +p{ \REMAINS{widow, orphan} }
        +p{ \REMAINS{数式のalignment tab} }
        +p{ \REMAINS{ページ分割できる表組版} }
        +p{ \REMAINS{行長が変わる段落} }
      >
      +subsection{言語機能の拡張}<
        +p{ \REMAINS{シグネチャ，多重モジュール} }
        +p{ \REMAINS{ファンクタか型クラス} }
        +p{ \REMAINS{パッケージマネージャ} }
        +p{ \REMAINS{レコードに関する型システムの拡張} }
        +p{ \REMAINS{末尾再帰最適化} }
      >
      +p{ \REMAINS{CFF系フォントの部分埋め込み} }
      +p{ \REMAINS{画像読み込みのGIF，PNG等対応} }
      +p{ \REMAINS{タグつきPDFの出力} }
      +p{ \REMAINS{相対パスの扱い，プリプロセッサ} }
      +p{ \REMAINS{文脈のエントリーの拡張機能} }
    >
    +section{既存機能の破壊的な変更}<
      +p{ \REMAINS{フォント読み込みの機構} }
      +p{ \REMAINS{line-breakのインターフェイス変更} }
      +p{ \REMAINS{graphicとgraphic list} }
    >
  >
  +chapter?:(`specification`){言語仕様}<
    +p{
      この章は，対象をより細かい粒度で理解しようとせずにはいられない，物好きな読者向けに用意した．
      全貌を形式的に記述するには\SATySFi;は大きすぎるので，
      根幹となる部分だけを抜き出したサブセットをいくつか定義し，
      それについて操作的意味論や型システムをフォーマルに記述することを試みた．
    }
    +p{ \REMAINS{} }
  >
>
