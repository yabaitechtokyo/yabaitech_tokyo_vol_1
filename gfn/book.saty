% -*- coding: utf-8 -*-
@import: settings
@import: preface
@import: introduction
@import: getting-started
@import: alias-command-definition
@import: overall
@import: line-breaking
@import: graphics
@import: specification
@import: cross-reference
@import: bib

document (|
  title = {The \SATySFi;book};
  author = {T. Suwa};
  preface = preface;
  bibliography = bibliography;
|) '<
  +chapter?:(`introduction`){\SATySFi;の開発動機}< #introduction; >
  +chapter?:(`getting-started`){\SATySFi;簡易入門}< #getting-started; >
  +chapter?:(`basic-command-definition`){コマンド定義：基礎編}<
    +p{
      \ref-chapter(`getting-started`);で\pkg{stdjareport}を用いて
      \SATySFi;の基礎的なコマンドの用法を知った．
      ところで，マークアップ言語の大きな強みのひとつは
      自前でコマンドを定義することによって
      種々の自動処理を実現したり独自の意味マークアップを規定したりできる点にあったはずである．
      実際，\codem{+chapter}とか\codem{+p}とか\codem{\\dfn}とかいった
      コマンドたちは単に\pkg{stdjareport}クラスによって定義が提供されているだけであり，
      その気になればユーザでも同様の定義を書いたりできるはずだ．
      そろそろ自前でコマンドを定義したくてうずうずしている読者も多いかと思う．
      この章では，コマンド定義のごく基礎的な方法を紹介する．
      あらかじめ言ってしまうとここでの説明はとてもアドホックなものになっており，
      \SATySFi;をよく理解されたのちにこの章を読めば
      「こんな子供騙しな説明をしていたのか」と驚かれるかもしれないが，
      読者の様々なバックグラウンドを鑑み，
      まず最初の一歩としておおまかに把握してもらうには良い説明だろうと
      判断してのことなのでご容赦願いたいと思う．
      より深い理解を獲得し，より柔軟で幅広い種類の処理をコマンドとして定義するには，
      \ref-chapter(`overall-structure`);で
      \SATySFi;が行なっている組版処理の全体像を把握した上で
      \ref-chapter(`advanced-command-definition`);に臨んでいただきたい．
    }
    +section{簡単なエイリアス}< #alias-command-definition; >
    +section{プログラミング言語としての\SATySFi;}<
      +p{
        既に述べたように，\SATySFi;はいわゆる函数型らしい特徴を兼ね備えた
        組版処理向けのマークアップ言語である．
        むしろ，より正確を期して言い表すならば
        値呼びの函数型言語の上に組版処理用の種々の言語機能が分厚く搭載された
        DSL（domain-specific language, 領域特化言語）だ．
        プログラミング言語としての\SATySFi;の基礎的部分には
        OCamlに大変よく似た体系が採用されており，
        基礎的部分の理解を得るのにOCamlに関する参考書で代用することも十分可能なほどである．
        とはいえ，OCamlなどの他言語から回り道せずとも\SATySFi;での最低限の直観を身につければ
        十分\SATySFi;でのプログラミングが可能であり，
        熱心に函数型プログラミングの基礎を習得したい読者ばかりではないであろうから，
        ここでも簡単にプログラミング言語としての\SATySFi;について解説する．
        また，OCamlと\SATySFi;との間には目的意識や美意識の違いに起因した多少の差異があるので，
        これについて（既にOCamlで流暢にプログラミングできる読者に対しても）簡単に補足する．
      }
      +subsection{式と値}<
        +p{
          \SATySFi;には対話環境が特に整備されていないので，
          プログラムの計算結果をPDFに出力して確かめることにしよう．
          ひとまず以下のようなコードを見てほしい：

          \d-code(```
            @require: stdjareport

            let-inline \show-int n =
              embed-string (arabic n)
            in

            document (|
              title = {Programming in \SATySFi;};
              author = {計 算太郎};
            |) '<
              +p{ Answer: \show-int(40 + 2); }
            >
          ```);%

          \codem{let-inline}から始まる，
          未知でありながら前節で見たインラインコマンドを定義する方法によく似た構文があるが，
          実際これは\codem{\\show-int}というインラインコマンドの定義である．
          この定義をどう読むのかは後々わかることになるので，
          今の段階では
          「与えられた整数を版面に文字として10進法で出力するコマンド\codem{\\show-int}」
          を定義するオマジナイだと思っていただきたい．
          注目されたいのは\codem{\\show-int}を使う部分，すなわち

          \d-code(```
            ​  +p{ Answer: \show-int(40 + 2); }
          ```);%

          である．丸括弧に囲まれた\codem{40 + 2}という怪しげな記述がある．
          とりあえず，この文書を\SATySFi;処理系にかけてみると，
          この段落に相当する部分は

          \d-block(open Sample in '<
            +p{ Answer: \show-int(40 + 2); }
          >);%

          と出力される．そう，${40} と ${2} の和が計算されているのである．
          平たく言えば，こういった “計算をする処理” がプログラムの仕事の根幹であり，
          “計算をする処理” をプログラムとして記述することをプログラミングと呼ぶ．
          \codem{40 + 2}のような記述は
          \dfnje{\index(`シキ`){式}}{expression}
          またはしばしば
          \dfnje{\index(`コウ`){項}}{term}と呼ばれ，
          式を適切な構文にしたがって組み立てることでプログラムが構築される\footnote{
            C言語やPythonなどの
            “手続き的な” 観点に強く基づいている計算機言語に馴染みのある読者は
            「式から文をつくり，文からプログラムを構築するのではないか？」
            と思われるかもしれないが，
            \SATySFi;に文の概念はない．
            というか，式の特殊な場合が “手続き的な” 言語に備わっている文に相当するのである．
            これはOCamlをはじめとする多くのいわゆる函数型言語に共通する性質である．
          }．
        }
        +p{
          \codem{40 + 2}の “計算が進んで” \codem{42}になったように，
          式は一般に “それ以上計算しない式” へと “うつりかわっていく”．
          この “うつりかわり” の過程を
          \dfnje{\index(`ヒョウカ`){評価}}{evaluation}
          またはしばしば
          \dfnje{\index(`カンヤク`){簡約}}{reduction}
          と呼び， “それ以上計算しない式” を
          \dfnje{\index(`コウブンテキアタイ`){構文的値}}{syntactic value}
          或いは単に
          \dfnje{\index(`アタイ`){値}}{value}
          と呼ぶ．
          プログラムの動作とは，式を評価して値を求めることなのである．
        }
        +p{
          \REMAINS{2項演算子の結合優先度}
        }
      >
      +section{変数とその束縛}<
        +p{
          \REMAINS{変数の概念とlet式}
        }
        +p{
          \REMAINS{変数名}
        }
      >
      +section{基本的なデータと型}<
        +p{
          \REMAINS{整数，文字列，浮動小数点数，長さ，真偽値}
        }
      >
      +section{函数と条件分岐}<
        +p{
          \REMAINS{函数定義と条件分岐}
        }
      >
      +section{代数的データ型}<
        +p{
          \REMAINS{代数的データ型}
        }
      >
      +section{再帰函数}<
        +p{
          \REMAINS{再帰函数}
        }
      >
    >
  >
  +chapter?:(`overall-structure`){文書が処理される仕組み}< #overall; >
%  +chapter?:(`type-system`){型システム}<
%    +p{
%      既に\ref-chapter(`introduction`);で述べたとおり，
%      \SATySFi;の最大の特徴は型検査器を備えているおかげで
%      或る種の入力の誤りを実際に組版処理を始めるよりも前に検出してすばやく報告できることにある．
%      本章では，この型検査器を実現している型システムについて見ていくことにしよう．
%    }
%    +p{ \REMAINS{} }
%  >
  +chapter?:(`advanced-command-definition`){コマンド定義：発展編}<
    +p{
      \ref-chapter(`basic-command-definition`);
      で基礎的なコマンド定義の方法およびプログラミング言語としての\SATySFi;について習得し，
      \ref-chapter(`overall-structure`);で\SATySFi;の処理系の全体像，
      および各工程がどのように定式化されているかについて概観した．
      これらの前提知識を把握した下で，この章ではようやくフォントや文字色，行送りといった，
      “組版上の装飾的な視覚情報” にも関わる処理を行なうコマンドの実装方法を習得する．
    }
    +section?:(`text-processing-context`){テキスト処理文脈}<
      +p{
        \ref-chapter(`overall-structure`);でも既に述べたが，
        組版処理はインラインテキスト・ブロックテキストといった
        “テキストの情報” だけが与えられてもできない．
        すなわち，どのフォントのどんなサイズで組むか\footnote{
          活版印刷の慣習としては，“font” という語は
          各字形が同一のデザインに則っているだけでなく
          サイズも相等しいひと揃いの活字のセットを指したようだが，
          \SATySFi;でフォントと言う場合は
          （字形やそれに関するメトリックのひとかたまりに紐づけられた）フォント名，
          拡大縮小比率，ベースライン調整率
          の3つ組を指す．詳しくは\ref-chapter(`typography`);で述べる．
        }，段落の幅や行送りはどの程度の長さにするか，
        といった情報が “テキストの情報” に加えて必要である．
        これらの
        “テキストには表れていないが組版処理上必要な情報”
        を，\SATySFi;は
        \dfnje{\index(`テキスト処理文脈`){テキスト処理文脈}}{text-processing context}
        という機構に保持させて扱う．
        抽象的な説明を続けてもおそらく要領を得ないであろうから，
        具体例を用いて説明しよう．
        例えば，文字サイズを1.5倍に変更するコマンド\codem{\\enlarge}を考える：

        \d-code-and-block(```
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        ```)(open Sample in '<
          +p{ 内側の\enlarge{文字が\enlarge{1.5倍}の大きさに}なります． }
        >);%

        このような\codem{\\enlarge}は次のように定義できる：

        \d-code(```
          let-inline ctx \enlarge it =
            let size = get-font-size ctx in
            let ctx-enlarge = set-font-size (size *' 1.5) ctx in
              read-inline ctx-enlarge it
        ```);%

        唐突に全部見せられてもあまり実感が湧かないであろうから少しずつ説明するが，
        まず1行目から見慣れない文法である．
        \codem{let-inline}を用いてインラインコマンドを定義する構文は
        \ref-chapter(`basic-command-definition`);で既に紹介したが，
        ここでは\codem{let-inline}と定義されるコマンド名\codem{\\enlarge}との間に
        \codem{ctx}なる何かがある．
        実はこれこそがテキスト処理文脈を受け取る “第0引数” の変数だ．
        コマンドの適用が評価されるとき，
        ユーザが与えた通常の引数に加えて，コマンドが使われている箇所のすぐ外側の
        テキスト処理文脈がこの変数\codem{ctx}に渡され，
        コマンドの実装中で使える，というわけである．
        ここまで\pkg{stdjareport}など
        何らかのクラスファイルが提供するマークアップ等の方式に従って
        \SATySFi;を使うにあたってはテキスト処理文脈を全く意識する必要がなかったであろうけれども，
        実のところユーザからは見えない裏側で
        密かに各コマンドがテキスト処理文脈を受け渡ししていたのである．
        なお，\codem{ctx}は単に変数名なので，第0引数に\codem{x}とか\codem{y}とか
        \codem{i-love-satysfi}といった違う名前を使っても構わない\footnote{
          ただし，既存のパッケージでは慣習的に第0引数を必ず\codem{ctx}という変数名にしているので，
          複数人で開発したり，既存パッケージを改造したりする場合は
          \codem{ctx}という変数名で統一した方が理解に齟齬を生じにくいかもしれない．
        }．
      }
      +p{
        さて，続いてコマンド定義の “中身” を見てみる．
        第0引数の\codem{ctx}と（各適用でユーザが与える）第1引数\codem{it}を使うのだが，
        まず\codem{size}に
        外から渡されてきたテキスト処理文脈\codem{ctx}が保持している
        フォントサイズを取り出して束縛する．これはプリミティヴ：

        \val?:(`get-font-size`)({get-font-size})%
          (Type.(context --> length));%

        を用いて行なう．取得したフォントサイズ\codem{size}は\type(Type.(length));型であり，

        \val?:(`*'`)({(\*')})(Type.(length --> (float --> length)));%

        を用いて\codem{size \*' 1.5}で${1.5}倍の長さを得る．
        フォントサイズの設定は

        \val?:(`set-font-size`)({set-font-size})%
          (Type.(length --> (context --> context)));%

        を用いて行なう．
        すなわち，古いテキスト処理文脈\codem{ctx}と設定するフォントサイズ\codem{size}に対して
        \codem{set-font-size size ctx}で
        フォントサイズの更新された新しいテキスト処理文脈が返ってくる．
        \codem{\\enlarge}の実装では，この新しいテキスト処理文脈を
        変数\codem{ctx-enlarge}に束縛している．
        なお，ここの一連の処理で
        \codem{ctx}の内容が “書き換えられる” わけではないことに注意されたい．
        単に\codem{ctx}の内容のうちフォントサイズに関するデータだけが
        \codem{size}に変更された新しいテキスト処理文脈がつくられて
        \codem{ctx-enlarge}という変数に束縛されているだけである．
        実際，\codem{ctx-enlarge}が束縛されたスコープでも
        依然として\codem{ctx}を使うことができ，
        かつそのテキスト処理文脈には元々のフォントサイズが保持されている．
      }
      +p{
        最も重要なのは最終行だ．ここで使われているプリミティヴ

        \val?:(`read-inline`)({read-inline})%
          (Type.(context --> (inline-text --> inline-boxes)));%

        は\ref-chapter(`overall-structure`);で説明した
        インライン変換器に相当し，\ref-figure(`conversion-to-inline-boxes`);
        に示されたような処理をしている．すなわち，
        \codem{read-inline \meta{ctx} \meta{it}}で
        テキスト処理文脈\codem{\meta{ctx}}の保持するフォントや
        文字サイズなどの情報をもとにインラインテキスト\codem{\meta{it}}を
        インラインボックス列へと変換する．
        そしてこれがきわめて重要な事項なのだが，
        インラインテキスト\codem{\meta{it}}に含まれている
        インラインコマンドの適用が評価されるのも，
        この\codem{read-inline}によるインラインボックス列への変換の最中である．
        このとき，\codem{read-inline}に第1引数として渡したテキスト処理文脈が，
        第2引数の\codem{\meta{it}}中の各コマンド適用を評価するときに
        第0引数として渡されるのである．
      }
    >
    +p{
      \REMAINS{コマンドが処理されるアニメーション}
    }
    +p{
      \REMAINS{let-inlineによるエイリアス定義は糖衣構文}
    }
    +p{
      \REMAINS{発展的なコマンド定義：line-break}
    }
  >
  +chapter?:(`line-breaking`){行分割処理}< #line-breaking; >
  +chapter?:(`typography`){文字組版}<
    +p{
      文字は組版処理の主役であり，そして最も人間くささゆえの複雑性を備えた組版処理対象だ．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`graphics`){グラフィックス}< #graphics; >
  +chapter?:(`math`){数式組版}<
    +p{
      主に理工系の文書をしたためる者にとって，
      数式組版機能は水や空気のように当然のものとして組版処理システムに備わっていてほしいものだ．
      \TeX;/\LaTeX;が30年の長きに亘って使われ続けてきた大きな要因のひとつが，
      誰もが納得するような品質の数式組版機能を古くから提供している
      数少ない組版処理システムだったからであることにおそらく異論はないだろう．
    }
    +p{
      \SATySFi;も，\TeX;/\LaTeX;に肩を並べられるくらいの品質の数式組版機能を提供している．
      しかも，既に\ref-chapter(`getting-started`);で見たように，
      \LaTeX;そっくりの構文で書くことができる．
      数式を多大に含む文書を執筆したいという動機で既に盛んに\LaTeX;に触れていた人にとって，
      少なくとも数式の記法が\SATySFi;への移行に関する心理的障壁となることはまずないだろう．
      本章では，\SATySFi;に備わっている数式組版機能について，詳細を追って見ていくことにしよう．
    }
    +p{
      なお，繰り返しになるが，\SATySFi;での数式の記述はコードの見た目上\LaTeX;にそっくりなものの，
      裏でやっていることは両者で全然違う．
      \LaTeX;は字句解析（トークン化）に相当する処理を組版処理と同時進行で行ない，
      かつ構文木も一切構築せずパターンマッチでトークン列を書き換えていくのに対し，
      \SATySFi;は静的に構文解析して数式を構文木の形で保持している．
    }
    +p{ \REMAINS{} }
  >
  +chapter?:(`cross-reference`){相互参照}< #cross-reference; >
  +chapter?:(`page-breaking`){ページ分割処理}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`primitives`){ファイル分割とモジュール}<
    +p{ \REMAINS{} }
  >
  +chapter?:(`future-work`){Future Work}<
    +p{
      \SATySFi;は現時点でも充分実用に耐える程度に機能を備えているが，
      今後さらに拡張していきたいと考えている点がいくつもある．
      本章ではこれについて簡潔に述べることとしよう．
      端的に言ってしまえば開発に協力してくださるかもしれない方への喧伝である．
    }
    +section{機能の拡張}<
      +subsection?:(`text-mode`){テキストモード}<
        +p{
          \dfnje{テキストモード}{text mode}は，
          \SATySFi;で書かれた文書をHTMLや\LaTeX;といったテキストファイルへとトランスパイルするためのモードである．
          \SATySFi;の前身である，拙作の\dfn{Macrodown}という言語が担っていた処理の，形式化を改めた再来ともいえる．
          テキストモードでは，
          PDFを出力する通常のモードである\dfnje{PDFモード}{PDF mode}には備わっていた
          \type(Type.inline-boxes);などの型や
          \codem{read-inline}などのプリミティヴはなく，
          インラインテキストは\codem{read-inline}の代わりに用意されたプリミティヴ
          \codem{stringify-inline}により文字列化される．
          一応すでに\code(`--text-mode`);というオプションで起動して試用できるが，
          数式には対応していない．
          将来的には数式もMathMLへトランスパイルしたり
          実際に（PDFモードと同様に）組版処理を施してSVGとして出力したりする機能を
          備えつけることを想定している．
        }
      >
      +subsection{文字組版機能の拡張}<
        +desc{縦書き，LTR/RTL混植}{
          縦書きは少なくとも和文組版では根強い需要があるし，
          ラテン文字とアラビア文字などLTRな文字体系とRTLな文字体系の混植も多言語組版では避けることのできない道だ．
          特に縦書きはプリミティヴの設計など言語のインターフェイスを大幅に拡張する必要が見込まれる．
        }
        +desc{2段組み}{
          論文組版で特に需要がある．
          インターフェイスの設計や，
          脚註や浮動する図表などと共存させた処理の実装がやや難しい．
        }
        +desc{OpenTypeフィーチャのON/OFF機能}{
          OpenTypeフォントの\code(`GSUB`);や\code(`GPOS`);といったテーブルには
          発展的な文字組版を実現するための種々のデータが格納されており，
          現在の\SATySFi;はOpenTypeフィーチャのうち
          合字処理のために\code(`liga`);テーブルを，
          カーニング処理のために\code(`kern`);テーブルを，
          ダイアクリティカルマークの処理のために\code(`mark`);テーブルと\code(`mkmk`);テーブルを，
          このほか数式フォントのために\code(`ssty`);テーブルなどを読み出すのだが，
          パッケージレヴェルでこれらのフィーチャの有効・無効を切り替えるプリミティヴを提供していないので，
          例えば\code(`jp90`); (JIS90 Forms) などのフィーチャを有効にして
          漢字字形を切り替えるなどの高度な調整はまだできない．
          将来的にこれを可能にしたいと考えている．
        }
        +desc{合字やカーニング処理の言語ごとの切り替え}{
          合字処理やカーニング処理は現在ラテン文字のみに対応しているが，
          これを他の文字体系に拡張し，かつ言語ごとに切り替えられるようにしたい．
          実装自体は単純だが，インターフェイスをどう簡潔にするかが多少非自明である．
        }
        +desc{ウィドウ，オーファン対応}{
          段落の最後の行だけ分割されて次のページの先頭に組まれて見栄えが悪いものを\dfnje{ウィドウ}{widow}，
          段落の最後の行が行長に対してかなり短くなって見栄えが悪いことを\dfnje{オーファン}{orphan}とそれぞれ呼ぶ．
          これらを防ぐ（何らかのペナルティを与えて出現を抑制する）機構が現在の\SATySFi;には備わっていない．
        }
        +desc{数式のalignment tab}{
          \LaTeX;の\code(`align`);環境などでは数式の揃え位置を決定するのに
          alignment tabという概念が備わっており，
          デフォルトでは\code(`&`);という文字がこれの記述を担う．
          \SATySFi;にはこれが備わっていないため，
          \codem{+align}コマンドなどでは揃える場所で切った数式のリストを渡すという
          ぎこちない仕組みを採ってしまっている．
          \SATySFi;にもalignment tabに相当する機能を追加し，
          これをより自然なインターフェイスにしたい．
        }
        +desc{ページ分割できる表組版}{
          現在の\SATySFi;はインラインボックス列としての表しか組めないが，
          ブロックボックス列版でかつ途中でページ分割できる表を組む機能を追加したいと考えている．
        }
        +desc{行長が変わる段落}{
          途中で行長が変わるような段落の組版は，
          途中で図版を回り込むようにテキストを組んだりするのに便利なのだが，
          計算量上効率的な実現がかなり難しい．
          \TeX;では\code(`\parshape`);というコマンドにより実現されているが，
          これは「何行目をどれだけの長さにする」という指定方法を採っており，
          行分割後の各行に含まれる内容の高さと深さによっては
          段落全体が所望の形にはならず縦に伸びたりしてしまう．
          何らかの方法で段落を
          （矩形とは限らない，途中で幅が変わるような）図形に収めるように行分割する処理を
          アルゴリズムとして確立したい．
        }
      >
      +subsection{言語機能やシステム上の拡張}<
        +desc{シグネチャ，多重モジュール}{
          シグネチャに別名をつけたり，モジュールを多重化できるように
          モジュールシステムを拡張したい．
        }
        +desc{型クラスまたはファンクタ}{
          現状の\SATySFi;はいわゆるオーヴァーロードができないため，
          記述が複雑になってしまうことがよくある．
          アドホック多相を型安全に実現するため，
          Haskell等で根強い支持を確立している
          \dfnje{型クラス}{typeclass}を導入したいと考えている．
          或いはML系言語で盛んに使われている
          \dfnje{ファンクタ}{functor}の仕組みを導入してもよいかもしれない．
        }
        +desc{パッケージマネージャ}{
          現代的な計算機言語では，
          多くのパッケージをインストールしたり用いたりするのにパッケージマネージャは必須である．
        }
        +desc{レコードに関する型システムの拡張}{
          現在の\SATySFi;は\cite[`Ohori1995`];に基づくレコード計算の型システムを備えているが，
          より柔軟な型システムへと拡張できないかと思案中である．
          場合によっては既にOCamlなどに取り込まれている\dfnje{列多相}{row polymorphism}
          \cite[`Remy1993`];や，或いは
          さらに強力な拡張\cite[`Osinski2006`];に切り替えることも検討するかもしれない．
        }
        +desc{末尾再帰最適化}{
          計算上高いパフォーマンスを求められる用途ではないため，
          \SATySFi;は特に組版処理前に顕著な最適化をしない．
          実際（行分割処理など内部的な処理ではなく）
          パッケージレヴェルで記述された処理は
          ほとんどが入力に対して線型で済むような処理である．
          しかし，実用上PEG構文解析器など複雑な処理を要する場面もあり，
          或る程度基本的な最適化を行なう必要性を感じつつある．
          その最たるものが末尾再帰最適化である．
        }
      >
      +desc{CFF系OpenTypeフォントの部分埋め込み}{
        OpenTypeフォントには，大別して

        \listing{
          * \code(`glyf`);や\code(`loca`);などのテーブルによって
            グリフ情報が格納されている
            \dfn{TrueTypeアウトライン系}のもの

          * \code(`CFF`);テーブルなどによってそれらの情報が格納されている
            \dfn{CFFアウトライン系}のもの
        }%

        の2種類がある．
        \SATySFi;は\code(`otfm`); \cite[`otfm`];という
        著者が大幅に拡張したOpenTypeフォントデコーダによって
        自前でフォントをデコードして使っている．
        部分埋め込みも自前で行なっているのだが，
        TrueType系のOpenTypeフォントには対応しているものの
        CFF系のOpenTypeフォントはまだ部分埋め込みできない．
        そのため，現状では

        \listing{
          * CFFアウトラインをもつ非TrueType CollectionのOpenTypeフォントは
            全部埋め込みされ，出力されるPDFの容量はかなり大きくなる

          * CFFアウトラインをもつTrueType CollectionのOpenTypeフォントは
            （PDFの仕様上全部埋め込みできないため）使用できない
        }%

        という状況である．\code(`CFF`);テーブルの部分埋め込みを実装し，これを改善したい．
      }
      +desc{画像読み込みのGIF，PNG等対応}{
        プリミティヴ\codem{load-image}は（色空間がCMYK以外の）JPEGのみに対応しているが，
        これを色空間がCMYKのJPEGやGIF，PNG等に拡張したい．
      }
      +desc{タグつきPDFの出力}{
        PDF 1.7には，PDFファイルに “マークアップ情報” を埋め込む機能がある．
        これの出力に関するプリミティヴを実装したい．
      }
      +desc{相対パスの扱い，プリプロセッサ}{
        現在の\SATySFi;の実装に於いて，
        \codem{load-image}などのパスを文字列として受け取るプリミティヴは，
        相対パスが渡されたときには
        \SATySFi;が起動されたカレントディレクトリからの相対パスとして解釈される．
        これは文書を構成する（システムにインストールされたパッケージ以外の）ファイルが
        複数のディレクトリに跨がる場合には特に著しく不便な性質だ．
        これを改善するため，
        相対パスを静的に絶対パスへと変換できるようなプリプロセスを何らかの形で導入したい．
        さらにいえば，長期的な目標ではあるが，
        より一般性の高い，OCamlでいうPPXに相当するようなプリプロセッサ機能を導入したいとも考えている．
      }
      +desc{テキスト処理文脈が保持する情報を拡張する機能}{
        現状ではテキスト処理文脈が保持できる情報は事前に決められており，
        ユーザやパッケージ開発者が増設することはできない．
        これを可能にする言語機能を提供したい．具体的には

        \d-codem{
          context-entry \meta{entry-name} : \meta{type} = \meta{default}
        }%

        といった構文でテキスト処理文脈が新たにもつ “エントリー” を宣言でき，
        実際にその情報に\codem{ctx\#\#\meta{entry-name}}でアクセスしたり，
        \codem{update-entry}という新しい予約語の字句を使った構文
        \codem{\meta{ctx} \|\> update-entry \#\#\meta{entry-name} \meta{v}}
        で更新したりできるようにしたい．
      }
    >
    +section{既存機能の破壊的な変更}<
%      +desc{フォント読み込みの機構}{
%      }
      +desc{テキスト処理}{
        ひとまずそれらしく和欧混植ができるようにすることを目標として実装したため，
        文字組版に関してかなりアドホックな点が多い．
        現在いくらか見受けられる奇妙な形式化を改め，かつ多言語組版への対応を志向し，
        より一般性の高いテキスト処理を追求したい．
      }
      +desc{プリミティヴのインターフェイス変更}{
        \codem{line-break}が段落の上下でページ分割してよいかを
        第1引数と第2引数で受け取るという形式をとっていることや，
        段落の上下のマージンを\codem{set-paragraph-margin}を介して設定する方式になっていることなど，
        現状の\SATySFi;にはエレガントでもなければ実用上便利でもないような
        インターフェイスをもつプリミティヴがいくらかある．
        互換性を損なうためタイミングには注意を要するが，
        可能であればこれらの機構はよりスマートな形式化に改めたい．
      }
      +desc{graphicとgraphic list}{
        グラフィックスに関する型の現状の形式化は，
        \type(Type.(list graphics));型と\type(Type.(graphics));型の
        “立場的な違い” がほとんどない．これらを\type(Type.(graphics));型に統一し，

        \val({concat-graphics})(Type.((list graphics) --> graphics));%

        のようなプリミティヴを追加することを検討したい．
      }
    >
  >
  +chapter?:(`specification`){言語仕様}< #specification; >
>
