@import: ../main/book-class
@import: ../main/bib
% replace this to your bibliography!!

let wasabiz-article = '<
  +chapter ?:(`wasabiz-article`) (|
    bibliography = bibliography;
    title = {"Schemeの実装におけるスタックフレーム(Draft)" を実装する};
    author = {wasabiz};
  |) <
    +section {はじめに}<
      +p{
        この章では，「Schemeの実装におけるスタックフレーム(Draft)」というウェブページに掲載されているアイデアを基にSchemeのコンパイラを作成していきます．
        Schemeは私の個人的なお気に入りのプログラミング言語の一つで，これまでもいくつか処理系を作成してきました．
        その過程でSchemeの実装方法についていくつもの文献を読んできました．
        中でも，件のサイトに掲載されている手法はシンプルでありながら効率的かつ巧妙で，Schemeの実装方法として最も美しい手法の一つであると言えるでしょう．
        これは，このページの著者であるshiroさんがGaucheという有名なScheme処理系の作者であり，その長い実装の経験があった上で辿りついた結論だからなのかもしれません．
        しかしながら，Gauche自体はこの手法に基づいて実装されているわけではなく，また他にこのページの内容に沿って実装されている処理系も私の知る限り存在しません．
        つまり，非常に魅力的な内容のアイデアが，実装されないまま何年も野晒しになっているという訳です．
        個人的にこの状況はとても勿体無いと感じながらも長いこと何もしないまま過ごしてきたのですが，今回この同人誌に参加するにあたってこれまでやってこなかった実装をやってみることにしました．
      }
      +p{
        実装にあたってはC言語を中間言語として用いることにしました．
        これは，レジスタ割り当てなどの手間を省くためと，もうひとつは私が単にC言語が好きなためです．
        あとで出てくるのですが，この手法の難しいところはガベージコレクションです．
        しかしC言語を経由して実装する場合，そこをC言語の実装(ここではgcc)に丸投げすることが出来ません．
        また，Schemeのような動的型の言語を実装するために複数の種類の型をひとつにして扱う必要がありますが，それについてもC言語で標準的な手法が用意されている訳ではありません．
        これらの問題に対処するため，この記事ではまず，C言語のためのガベージコレクションライブラリと動的型付きプログラミング用ライブラリを作成するところから初めます．
        結果的に，C言語を中間表現として用いる場合の困難さが大きく提言され，メンテンナンスが容易でかつ効率的なコンパイラを実装することができます．
      }
      +p{
        以下ではまず初めに，背景となる「Schemeの実装におけるスタックフレーム(Draft)」の内容について解説したあと，関連する話題として「Cheney on the M.T.A.」と呼ばれるSchemeの実装テクニックについて説明します．
        「Cheney on the M.T.A.」はChicken Scheme等の実装で使われている手法で今回実装する手法と多くの共通点を持ちます．
        さらに，実装の細かなテクニックとして，C言語でガベージコレクションと動的型付プログラミングを行うためのライブラリを作成します．
        これらのライブラリは今回のコンパイラ作成に便利であるだけでなく，通常のC言語のプログラミングにも利用可能です．
        いずれもヘッダファイルのみで記述されているため，includeするだけで使えます．
        その後にコンパイラの実装の詳細を紹介し，その評価を行います．
        さいごにまとめでこの章を締め括ります．
      }
    >
    +section {背景: Schemeの実装におけるスタックフレーム(Draft)}<
    >
    +section {Cheney on the M.T.A.}<
    >
    +section {C言語でガベージコレクション (gc.h)}<
    >
    +section {C言語でany型 (any.h)}<
    >
    +section {C言語で動的型付プログラミング (dy.h)}<
    >
    +section {実装} <
    >
    +section {評価} <
    >
    +section {まとめ} <
    >
  >
>